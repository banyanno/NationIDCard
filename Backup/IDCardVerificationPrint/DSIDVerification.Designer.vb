'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSIDVerification"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSIDVerification
    Inherits Global.System.Data.DataSet
    
    Private tableTBL_PROVINCE As TBL_PROVINCEDataTable
    
    Private tableTBL_DISTRICT As TBL_DISTRICTDataTable
    
    Private tableTBL_COMMUNE As TBL_COMMUNEDataTable
    
    Private tableTBL_VILLAGE As TBL_VILLAGEDataTable
    
    Private tableVIEW_PEOPLE_VERIFICATION As VIEW_PEOPLE_VERIFICATIONDataTable
    
    Private tabletbl_verification As tbl_verificationDataTable
    
    Private tableTblFormVerify As TblFormVerifyDataTable
    
    Private tableStatisticPeople As StatisticPeopleDataTable
    
    Private tableSelectAllProvince As SelectAllProvinceDataTable
    
    Private tableResultKJB As ResultKJBDataTable
    
    Private tableMOI_TEM_RESULT As MOI_TEM_RESULTDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TBL_PROVINCE")) Is Nothing) Then
                MyBase.Tables.Add(New TBL_PROVINCEDataTable(ds.Tables("TBL_PROVINCE")))
            End If
            If (Not (ds.Tables("TBL_DISTRICT")) Is Nothing) Then
                MyBase.Tables.Add(New TBL_DISTRICTDataTable(ds.Tables("TBL_DISTRICT")))
            End If
            If (Not (ds.Tables("TBL_COMMUNE")) Is Nothing) Then
                MyBase.Tables.Add(New TBL_COMMUNEDataTable(ds.Tables("TBL_COMMUNE")))
            End If
            If (Not (ds.Tables("TBL_VILLAGE")) Is Nothing) Then
                MyBase.Tables.Add(New TBL_VILLAGEDataTable(ds.Tables("TBL_VILLAGE")))
            End If
            If (Not (ds.Tables("VIEW_PEOPLE_VERIFICATION")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PEOPLE_VERIFICATIONDataTable(ds.Tables("VIEW_PEOPLE_VERIFICATION")))
            End If
            If (Not (ds.Tables("tbl_verification")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_verificationDataTable(ds.Tables("tbl_verification")))
            End If
            If (Not (ds.Tables("TblFormVerify")) Is Nothing) Then
                MyBase.Tables.Add(New TblFormVerifyDataTable(ds.Tables("TblFormVerify")))
            End If
            If (Not (ds.Tables("StatisticPeople")) Is Nothing) Then
                MyBase.Tables.Add(New StatisticPeopleDataTable(ds.Tables("StatisticPeople")))
            End If
            If (Not (ds.Tables("SelectAllProvince")) Is Nothing) Then
                MyBase.Tables.Add(New SelectAllProvinceDataTable(ds.Tables("SelectAllProvince")))
            End If
            If (Not (ds.Tables("ResultKJB")) Is Nothing) Then
                MyBase.Tables.Add(New ResultKJBDataTable(ds.Tables("ResultKJB")))
            End If
            If (Not (ds.Tables("MOI_TEM_RESULT")) Is Nothing) Then
                MyBase.Tables.Add(New MOI_TEM_RESULTDataTable(ds.Tables("MOI_TEM_RESULT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TBL_PROVINCE() As TBL_PROVINCEDataTable
        Get
            Return Me.tableTBL_PROVINCE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TBL_DISTRICT() As TBL_DISTRICTDataTable
        Get
            Return Me.tableTBL_DISTRICT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TBL_COMMUNE() As TBL_COMMUNEDataTable
        Get
            Return Me.tableTBL_COMMUNE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TBL_VILLAGE() As TBL_VILLAGEDataTable
        Get
            Return Me.tableTBL_VILLAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PEOPLE_VERIFICATION() As VIEW_PEOPLE_VERIFICATIONDataTable
        Get
            Return Me.tableVIEW_PEOPLE_VERIFICATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl_verification() As tbl_verificationDataTable
        Get
            Return Me.tabletbl_verification
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TblFormVerify() As TblFormVerifyDataTable
        Get
            Return Me.tableTblFormVerify
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StatisticPeople() As StatisticPeopleDataTable
        Get
            Return Me.tableStatisticPeople
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SelectAllProvince() As SelectAllProvinceDataTable
        Get
            Return Me.tableSelectAllProvince
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ResultKJB() As ResultKJBDataTable
        Get
            Return Me.tableResultKJB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MOI_TEM_RESULT() As MOI_TEM_RESULTDataTable
        Get
            Return Me.tableMOI_TEM_RESULT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSIDVerification = CType(MyBase.Clone,DSIDVerification)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TBL_PROVINCE")) Is Nothing) Then
                MyBase.Tables.Add(New TBL_PROVINCEDataTable(ds.Tables("TBL_PROVINCE")))
            End If
            If (Not (ds.Tables("TBL_DISTRICT")) Is Nothing) Then
                MyBase.Tables.Add(New TBL_DISTRICTDataTable(ds.Tables("TBL_DISTRICT")))
            End If
            If (Not (ds.Tables("TBL_COMMUNE")) Is Nothing) Then
                MyBase.Tables.Add(New TBL_COMMUNEDataTable(ds.Tables("TBL_COMMUNE")))
            End If
            If (Not (ds.Tables("TBL_VILLAGE")) Is Nothing) Then
                MyBase.Tables.Add(New TBL_VILLAGEDataTable(ds.Tables("TBL_VILLAGE")))
            End If
            If (Not (ds.Tables("VIEW_PEOPLE_VERIFICATION")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PEOPLE_VERIFICATIONDataTable(ds.Tables("VIEW_PEOPLE_VERIFICATION")))
            End If
            If (Not (ds.Tables("tbl_verification")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_verificationDataTable(ds.Tables("tbl_verification")))
            End If
            If (Not (ds.Tables("TblFormVerify")) Is Nothing) Then
                MyBase.Tables.Add(New TblFormVerifyDataTable(ds.Tables("TblFormVerify")))
            End If
            If (Not (ds.Tables("StatisticPeople")) Is Nothing) Then
                MyBase.Tables.Add(New StatisticPeopleDataTable(ds.Tables("StatisticPeople")))
            End If
            If (Not (ds.Tables("SelectAllProvince")) Is Nothing) Then
                MyBase.Tables.Add(New SelectAllProvinceDataTable(ds.Tables("SelectAllProvince")))
            End If
            If (Not (ds.Tables("ResultKJB")) Is Nothing) Then
                MyBase.Tables.Add(New ResultKJBDataTable(ds.Tables("ResultKJB")))
            End If
            If (Not (ds.Tables("MOI_TEM_RESULT")) Is Nothing) Then
                MyBase.Tables.Add(New MOI_TEM_RESULTDataTable(ds.Tables("MOI_TEM_RESULT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTBL_PROVINCE = CType(MyBase.Tables("TBL_PROVINCE"),TBL_PROVINCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTBL_PROVINCE) Is Nothing) Then
                Me.tableTBL_PROVINCE.InitVars
            End If
        End If
        Me.tableTBL_DISTRICT = CType(MyBase.Tables("TBL_DISTRICT"),TBL_DISTRICTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTBL_DISTRICT) Is Nothing) Then
                Me.tableTBL_DISTRICT.InitVars
            End If
        End If
        Me.tableTBL_COMMUNE = CType(MyBase.Tables("TBL_COMMUNE"),TBL_COMMUNEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTBL_COMMUNE) Is Nothing) Then
                Me.tableTBL_COMMUNE.InitVars
            End If
        End If
        Me.tableTBL_VILLAGE = CType(MyBase.Tables("TBL_VILLAGE"),TBL_VILLAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTBL_VILLAGE) Is Nothing) Then
                Me.tableTBL_VILLAGE.InitVars
            End If
        End If
        Me.tableVIEW_PEOPLE_VERIFICATION = CType(MyBase.Tables("VIEW_PEOPLE_VERIFICATION"),VIEW_PEOPLE_VERIFICATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_PEOPLE_VERIFICATION) Is Nothing) Then
                Me.tableVIEW_PEOPLE_VERIFICATION.InitVars
            End If
        End If
        Me.tabletbl_verification = CType(MyBase.Tables("tbl_verification"),tbl_verificationDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbl_verification) Is Nothing) Then
                Me.tabletbl_verification.InitVars
            End If
        End If
        Me.tableTblFormVerify = CType(MyBase.Tables("TblFormVerify"),TblFormVerifyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTblFormVerify) Is Nothing) Then
                Me.tableTblFormVerify.InitVars
            End If
        End If
        Me.tableStatisticPeople = CType(MyBase.Tables("StatisticPeople"),StatisticPeopleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStatisticPeople) Is Nothing) Then
                Me.tableStatisticPeople.InitVars
            End If
        End If
        Me.tableSelectAllProvince = CType(MyBase.Tables("SelectAllProvince"),SelectAllProvinceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSelectAllProvince) Is Nothing) Then
                Me.tableSelectAllProvince.InitVars
            End If
        End If
        Me.tableResultKJB = CType(MyBase.Tables("ResultKJB"),ResultKJBDataTable)
        If (initTable = true) Then
            If (Not (Me.tableResultKJB) Is Nothing) Then
                Me.tableResultKJB.InitVars
            End If
        End If
        Me.tableMOI_TEM_RESULT = CType(MyBase.Tables("MOI_TEM_RESULT"),MOI_TEM_RESULTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMOI_TEM_RESULT) Is Nothing) Then
                Me.tableMOI_TEM_RESULT.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSIDVerification"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSIDVerification.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTBL_PROVINCE = New TBL_PROVINCEDataTable
        MyBase.Tables.Add(Me.tableTBL_PROVINCE)
        Me.tableTBL_DISTRICT = New TBL_DISTRICTDataTable
        MyBase.Tables.Add(Me.tableTBL_DISTRICT)
        Me.tableTBL_COMMUNE = New TBL_COMMUNEDataTable
        MyBase.Tables.Add(Me.tableTBL_COMMUNE)
        Me.tableTBL_VILLAGE = New TBL_VILLAGEDataTable
        MyBase.Tables.Add(Me.tableTBL_VILLAGE)
        Me.tableVIEW_PEOPLE_VERIFICATION = New VIEW_PEOPLE_VERIFICATIONDataTable
        MyBase.Tables.Add(Me.tableVIEW_PEOPLE_VERIFICATION)
        Me.tabletbl_verification = New tbl_verificationDataTable
        MyBase.Tables.Add(Me.tabletbl_verification)
        Me.tableTblFormVerify = New TblFormVerifyDataTable
        MyBase.Tables.Add(Me.tableTblFormVerify)
        Me.tableStatisticPeople = New StatisticPeopleDataTable
        MyBase.Tables.Add(Me.tableStatisticPeople)
        Me.tableSelectAllProvince = New SelectAllProvinceDataTable
        MyBase.Tables.Add(Me.tableSelectAllProvince)
        Me.tableResultKJB = New ResultKJBDataTable
        MyBase.Tables.Add(Me.tableResultKJB)
        Me.tableMOI_TEM_RESULT = New MOI_TEM_RESULTDataTable
        MyBase.Tables.Add(Me.tableMOI_TEM_RESULT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTBL_PROVINCE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTBL_DISTRICT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTBL_COMMUNE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTBL_VILLAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_PEOPLE_VERIFICATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetbl_verification() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTblFormVerify() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStatisticPeople() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSelectAllProvince() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeResultKJB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMOI_TEM_RESULT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSIDVerification = New DSIDVerification
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TBL_PROVINCERowChangeEventHandler(ByVal sender As Object, ByVal e As TBL_PROVINCERowChangeEvent)
    
    Public Delegate Sub TBL_DISTRICTRowChangeEventHandler(ByVal sender As Object, ByVal e As TBL_DISTRICTRowChangeEvent)
    
    Public Delegate Sub TBL_COMMUNERowChangeEventHandler(ByVal sender As Object, ByVal e As TBL_COMMUNERowChangeEvent)
    
    Public Delegate Sub TBL_VILLAGERowChangeEventHandler(ByVal sender As Object, ByVal e As TBL_VILLAGERowChangeEvent)
    
    Public Delegate Sub VIEW_PEOPLE_VERIFICATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PEOPLE_VERIFICATIONRowChangeEvent)
    
    Public Delegate Sub tbl_verificationRowChangeEventHandler(ByVal sender As Object, ByVal e As tbl_verificationRowChangeEvent)
    
    Public Delegate Sub TblFormVerifyRowChangeEventHandler(ByVal sender As Object, ByVal e As TblFormVerifyRowChangeEvent)
    
    Public Delegate Sub StatisticPeopleRowChangeEventHandler(ByVal sender As Object, ByVal e As StatisticPeopleRowChangeEvent)
    
    Public Delegate Sub SelectAllProvinceRowChangeEventHandler(ByVal sender As Object, ByVal e As SelectAllProvinceRowChangeEvent)
    
    Public Delegate Sub ResultKJBRowChangeEventHandler(ByVal sender As Object, ByVal e As ResultKJBRowChangeEvent)
    
    Public Delegate Sub MOI_TEM_RESULTRowChangeEventHandler(ByVal sender As Object, ByVal e As MOI_TEM_RESULTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TBL_PROVINCEDataTable
        Inherits Global.System.Data.TypedTableBase(Of TBL_PROVINCERow)
        
        Private columnPROVINCEID As Global.System.Data.DataColumn
        
        Private columnPROV_EN As Global.System.Data.DataColumn
        
        Private columnPROV_KH As Global.System.Data.DataColumn
        
        Private columnVALIDFROM As Global.System.Data.DataColumn
        
        Private columnVALIDTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TBL_PROVINCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROVINCEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVINCEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROV_ENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROV_EN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROV_KHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROV_KH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALIDFROMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALIDFROM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALIDTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALIDTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TBL_PROVINCERow
            Get
                Return CType(Me.Rows(index),TBL_PROVINCERow)
            End Get
        End Property
        
        Public Event TBL_PROVINCERowChanging As TBL_PROVINCERowChangeEventHandler
        
        Public Event TBL_PROVINCERowChanged As TBL_PROVINCERowChangeEventHandler
        
        Public Event TBL_PROVINCERowDeleting As TBL_PROVINCERowChangeEventHandler
        
        Public Event TBL_PROVINCERowDeleted As TBL_PROVINCERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTBL_PROVINCERow(ByVal row As TBL_PROVINCERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTBL_PROVINCERow(ByVal PROVINCEID As Integer, ByVal PROV_EN As String, ByVal PROV_KH As String, ByVal VALIDFROM As String, ByVal VALIDTO As String) As TBL_PROVINCERow
            Dim rowTBL_PROVINCERow As TBL_PROVINCERow = CType(Me.NewRow,TBL_PROVINCERow)
            Dim columnValuesArray() As Object = New Object() {PROVINCEID, PROV_EN, PROV_KH, VALIDFROM, VALIDTO}
            rowTBL_PROVINCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTBL_PROVINCERow)
            Return rowTBL_PROVINCERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TBL_PROVINCEDataTable = CType(MyBase.Clone,TBL_PROVINCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TBL_PROVINCEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROVINCEID = MyBase.Columns("PROVINCEID")
            Me.columnPROV_EN = MyBase.Columns("PROV_EN")
            Me.columnPROV_KH = MyBase.Columns("PROV_KH")
            Me.columnVALIDFROM = MyBase.Columns("VALIDFROM")
            Me.columnVALIDTO = MyBase.Columns("VALIDTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROVINCEID = New Global.System.Data.DataColumn("PROVINCEID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVINCEID)
            Me.columnPROV_EN = New Global.System.Data.DataColumn("PROV_EN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROV_EN)
            Me.columnPROV_KH = New Global.System.Data.DataColumn("PROV_KH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROV_KH)
            Me.columnVALIDFROM = New Global.System.Data.DataColumn("VALIDFROM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALIDFROM)
            Me.columnVALIDTO = New Global.System.Data.DataColumn("VALIDTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALIDTO)
            Me.columnPROV_EN.MaxLength = 50
            Me.columnPROV_KH.MaxLength = 50
            Me.columnVALIDFROM.MaxLength = 50
            Me.columnVALIDTO.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTBL_PROVINCERow() As TBL_PROVINCERow
            Return CType(Me.NewRow,TBL_PROVINCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TBL_PROVINCERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TBL_PROVINCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TBL_PROVINCERowChangedEvent) Is Nothing) Then
                RaiseEvent TBL_PROVINCERowChanged(Me, New TBL_PROVINCERowChangeEvent(CType(e.Row,TBL_PROVINCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TBL_PROVINCERowChangingEvent) Is Nothing) Then
                RaiseEvent TBL_PROVINCERowChanging(Me, New TBL_PROVINCERowChangeEvent(CType(e.Row,TBL_PROVINCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TBL_PROVINCERowDeletedEvent) Is Nothing) Then
                RaiseEvent TBL_PROVINCERowDeleted(Me, New TBL_PROVINCERowChangeEvent(CType(e.Row,TBL_PROVINCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TBL_PROVINCERowDeletingEvent) Is Nothing) Then
                RaiseEvent TBL_PROVINCERowDeleting(Me, New TBL_PROVINCERowChangeEvent(CType(e.Row,TBL_PROVINCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTBL_PROVINCERow(ByVal row As TBL_PROVINCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TBL_PROVINCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TBL_DISTRICTDataTable
        Inherits Global.System.Data.TypedTableBase(Of TBL_DISTRICTRow)
        
        Private columnDISTRICTID As Global.System.Data.DataColumn
        
        Private columnDIST_EN As Global.System.Data.DataColumn
        
        Private columnDIST_KH As Global.System.Data.DataColumn
        
        Private columnDIST_TYPE As Global.System.Data.DataColumn
        
        Private columnPROVINCEID As Global.System.Data.DataColumn
        
        Private columnVALIDFROM As Global.System.Data.DataColumn
        
        Private columnVALIDTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TBL_DISTRICT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISTRICTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTRICTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIST_ENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIST_EN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIST_KHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIST_KH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIST_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIST_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROVINCEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVINCEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALIDFROMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALIDFROM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALIDTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALIDTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TBL_DISTRICTRow
            Get
                Return CType(Me.Rows(index),TBL_DISTRICTRow)
            End Get
        End Property
        
        Public Event TBL_DISTRICTRowChanging As TBL_DISTRICTRowChangeEventHandler
        
        Public Event TBL_DISTRICTRowChanged As TBL_DISTRICTRowChangeEventHandler
        
        Public Event TBL_DISTRICTRowDeleting As TBL_DISTRICTRowChangeEventHandler
        
        Public Event TBL_DISTRICTRowDeleted As TBL_DISTRICTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTBL_DISTRICTRow(ByVal row As TBL_DISTRICTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTBL_DISTRICTRow(ByVal DISTRICTID As Integer, ByVal DIST_EN As String, ByVal DIST_KH As String, ByVal DIST_TYPE As String, ByVal PROVINCEID As Integer, ByVal VALIDFROM As String, ByVal VALIDTO As String) As TBL_DISTRICTRow
            Dim rowTBL_DISTRICTRow As TBL_DISTRICTRow = CType(Me.NewRow,TBL_DISTRICTRow)
            Dim columnValuesArray() As Object = New Object() {DISTRICTID, DIST_EN, DIST_KH, DIST_TYPE, PROVINCEID, VALIDFROM, VALIDTO}
            rowTBL_DISTRICTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTBL_DISTRICTRow)
            Return rowTBL_DISTRICTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TBL_DISTRICTDataTable = CType(MyBase.Clone,TBL_DISTRICTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TBL_DISTRICTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDISTRICTID = MyBase.Columns("DISTRICTID")
            Me.columnDIST_EN = MyBase.Columns("DIST_EN")
            Me.columnDIST_KH = MyBase.Columns("DIST_KH")
            Me.columnDIST_TYPE = MyBase.Columns("DIST_TYPE")
            Me.columnPROVINCEID = MyBase.Columns("PROVINCEID")
            Me.columnVALIDFROM = MyBase.Columns("VALIDFROM")
            Me.columnVALIDTO = MyBase.Columns("VALIDTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDISTRICTID = New Global.System.Data.DataColumn("DISTRICTID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTRICTID)
            Me.columnDIST_EN = New Global.System.Data.DataColumn("DIST_EN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIST_EN)
            Me.columnDIST_KH = New Global.System.Data.DataColumn("DIST_KH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIST_KH)
            Me.columnDIST_TYPE = New Global.System.Data.DataColumn("DIST_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIST_TYPE)
            Me.columnPROVINCEID = New Global.System.Data.DataColumn("PROVINCEID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVINCEID)
            Me.columnVALIDFROM = New Global.System.Data.DataColumn("VALIDFROM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALIDFROM)
            Me.columnVALIDTO = New Global.System.Data.DataColumn("VALIDTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALIDTO)
            Me.columnDIST_EN.MaxLength = 50
            Me.columnDIST_KH.MaxLength = 50
            Me.columnDIST_TYPE.MaxLength = 50
            Me.columnVALIDFROM.MaxLength = 50
            Me.columnVALIDTO.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTBL_DISTRICTRow() As TBL_DISTRICTRow
            Return CType(Me.NewRow,TBL_DISTRICTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TBL_DISTRICTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TBL_DISTRICTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TBL_DISTRICTRowChangedEvent) Is Nothing) Then
                RaiseEvent TBL_DISTRICTRowChanged(Me, New TBL_DISTRICTRowChangeEvent(CType(e.Row,TBL_DISTRICTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TBL_DISTRICTRowChangingEvent) Is Nothing) Then
                RaiseEvent TBL_DISTRICTRowChanging(Me, New TBL_DISTRICTRowChangeEvent(CType(e.Row,TBL_DISTRICTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TBL_DISTRICTRowDeletedEvent) Is Nothing) Then
                RaiseEvent TBL_DISTRICTRowDeleted(Me, New TBL_DISTRICTRowChangeEvent(CType(e.Row,TBL_DISTRICTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TBL_DISTRICTRowDeletingEvent) Is Nothing) Then
                RaiseEvent TBL_DISTRICTRowDeleting(Me, New TBL_DISTRICTRowChangeEvent(CType(e.Row,TBL_DISTRICTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTBL_DISTRICTRow(ByVal row As TBL_DISTRICTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TBL_DISTRICTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TBL_COMMUNEDataTable
        Inherits Global.System.Data.TypedTableBase(Of TBL_COMMUNERow)
        
        Private columnCOMMUNEID As Global.System.Data.DataColumn
        
        Private columnCOMM_EN As Global.System.Data.DataColumn
        
        Private columnCOMM_KH As Global.System.Data.DataColumn
        
        Private columnCOMM_TYPE As Global.System.Data.DataColumn
        
        Private columnDISTRICTID As Global.System.Data.DataColumn
        
        Private columnVALIDFROM As Global.System.Data.DataColumn
        
        Private columnVALIDTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TBL_COMMUNE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMUNEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMUNEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMM_ENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMM_EN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMM_KHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMM_KH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMM_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMM_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISTRICTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTRICTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALIDFROMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALIDFROM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALIDTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALIDTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TBL_COMMUNERow
            Get
                Return CType(Me.Rows(index),TBL_COMMUNERow)
            End Get
        End Property
        
        Public Event TBL_COMMUNERowChanging As TBL_COMMUNERowChangeEventHandler
        
        Public Event TBL_COMMUNERowChanged As TBL_COMMUNERowChangeEventHandler
        
        Public Event TBL_COMMUNERowDeleting As TBL_COMMUNERowChangeEventHandler
        
        Public Event TBL_COMMUNERowDeleted As TBL_COMMUNERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTBL_COMMUNERow(ByVal row As TBL_COMMUNERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTBL_COMMUNERow(ByVal COMMUNEID As Integer, ByVal COMM_EN As String, ByVal COMM_KH As String, ByVal COMM_TYPE As String, ByVal DISTRICTID As Integer, ByVal VALIDFROM As String, ByVal VALIDTO As String) As TBL_COMMUNERow
            Dim rowTBL_COMMUNERow As TBL_COMMUNERow = CType(Me.NewRow,TBL_COMMUNERow)
            Dim columnValuesArray() As Object = New Object() {COMMUNEID, COMM_EN, COMM_KH, COMM_TYPE, DISTRICTID, VALIDFROM, VALIDTO}
            rowTBL_COMMUNERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTBL_COMMUNERow)
            Return rowTBL_COMMUNERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TBL_COMMUNEDataTable = CType(MyBase.Clone,TBL_COMMUNEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TBL_COMMUNEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOMMUNEID = MyBase.Columns("COMMUNEID")
            Me.columnCOMM_EN = MyBase.Columns("COMM_EN")
            Me.columnCOMM_KH = MyBase.Columns("COMM_KH")
            Me.columnCOMM_TYPE = MyBase.Columns("COMM_TYPE")
            Me.columnDISTRICTID = MyBase.Columns("DISTRICTID")
            Me.columnVALIDFROM = MyBase.Columns("VALIDFROM")
            Me.columnVALIDTO = MyBase.Columns("VALIDTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOMMUNEID = New Global.System.Data.DataColumn("COMMUNEID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMUNEID)
            Me.columnCOMM_EN = New Global.System.Data.DataColumn("COMM_EN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMM_EN)
            Me.columnCOMM_KH = New Global.System.Data.DataColumn("COMM_KH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMM_KH)
            Me.columnCOMM_TYPE = New Global.System.Data.DataColumn("COMM_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMM_TYPE)
            Me.columnDISTRICTID = New Global.System.Data.DataColumn("DISTRICTID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTRICTID)
            Me.columnVALIDFROM = New Global.System.Data.DataColumn("VALIDFROM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALIDFROM)
            Me.columnVALIDTO = New Global.System.Data.DataColumn("VALIDTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALIDTO)
            Me.columnCOMM_EN.MaxLength = 50
            Me.columnCOMM_KH.MaxLength = 50
            Me.columnCOMM_TYPE.MaxLength = 50
            Me.columnVALIDFROM.MaxLength = 50
            Me.columnVALIDTO.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTBL_COMMUNERow() As TBL_COMMUNERow
            Return CType(Me.NewRow,TBL_COMMUNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TBL_COMMUNERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TBL_COMMUNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TBL_COMMUNERowChangedEvent) Is Nothing) Then
                RaiseEvent TBL_COMMUNERowChanged(Me, New TBL_COMMUNERowChangeEvent(CType(e.Row,TBL_COMMUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TBL_COMMUNERowChangingEvent) Is Nothing) Then
                RaiseEvent TBL_COMMUNERowChanging(Me, New TBL_COMMUNERowChangeEvent(CType(e.Row,TBL_COMMUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TBL_COMMUNERowDeletedEvent) Is Nothing) Then
                RaiseEvent TBL_COMMUNERowDeleted(Me, New TBL_COMMUNERowChangeEvent(CType(e.Row,TBL_COMMUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TBL_COMMUNERowDeletingEvent) Is Nothing) Then
                RaiseEvent TBL_COMMUNERowDeleting(Me, New TBL_COMMUNERowChangeEvent(CType(e.Row,TBL_COMMUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTBL_COMMUNERow(ByVal row As TBL_COMMUNERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TBL_COMMUNEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TBL_VILLAGEDataTable
        Inherits Global.System.Data.TypedTableBase(Of TBL_VILLAGERow)
        
        Private columnVILLAGEID As Global.System.Data.DataColumn
        
        Private columnVILL_EN As Global.System.Data.DataColumn
        
        Private columnVILL_KH As Global.System.Data.DataColumn
        
        Private columnVILL_TYPE As Global.System.Data.DataColumn
        
        Private columnCOMMUNEID As Global.System.Data.DataColumn
        
        Private columnVALIDFROM As Global.System.Data.DataColumn
        
        Private columnVALIDTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TBL_VILLAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VILLAGEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVILLAGEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VILL_ENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVILL_EN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VILL_KHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVILL_KH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VILL_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVILL_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMUNEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMUNEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALIDFROMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALIDFROM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALIDTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALIDTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TBL_VILLAGERow
            Get
                Return CType(Me.Rows(index),TBL_VILLAGERow)
            End Get
        End Property
        
        Public Event TBL_VILLAGERowChanging As TBL_VILLAGERowChangeEventHandler
        
        Public Event TBL_VILLAGERowChanged As TBL_VILLAGERowChangeEventHandler
        
        Public Event TBL_VILLAGERowDeleting As TBL_VILLAGERowChangeEventHandler
        
        Public Event TBL_VILLAGERowDeleted As TBL_VILLAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTBL_VILLAGERow(ByVal row As TBL_VILLAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTBL_VILLAGERow(ByVal VILLAGEID As Integer, ByVal VILL_EN As String, ByVal VILL_KH As String, ByVal VILL_TYPE As String, ByVal COMMUNEID As Integer, ByVal VALIDFROM As String, ByVal VALIDTO As String) As TBL_VILLAGERow
            Dim rowTBL_VILLAGERow As TBL_VILLAGERow = CType(Me.NewRow,TBL_VILLAGERow)
            Dim columnValuesArray() As Object = New Object() {VILLAGEID, VILL_EN, VILL_KH, VILL_TYPE, COMMUNEID, VALIDFROM, VALIDTO}
            rowTBL_VILLAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTBL_VILLAGERow)
            Return rowTBL_VILLAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TBL_VILLAGEDataTable = CType(MyBase.Clone,TBL_VILLAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TBL_VILLAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVILLAGEID = MyBase.Columns("VILLAGEID")
            Me.columnVILL_EN = MyBase.Columns("VILL_EN")
            Me.columnVILL_KH = MyBase.Columns("VILL_KH")
            Me.columnVILL_TYPE = MyBase.Columns("VILL_TYPE")
            Me.columnCOMMUNEID = MyBase.Columns("COMMUNEID")
            Me.columnVALIDFROM = MyBase.Columns("VALIDFROM")
            Me.columnVALIDTO = MyBase.Columns("VALIDTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVILLAGEID = New Global.System.Data.DataColumn("VILLAGEID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVILLAGEID)
            Me.columnVILL_EN = New Global.System.Data.DataColumn("VILL_EN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVILL_EN)
            Me.columnVILL_KH = New Global.System.Data.DataColumn("VILL_KH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVILL_KH)
            Me.columnVILL_TYPE = New Global.System.Data.DataColumn("VILL_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVILL_TYPE)
            Me.columnCOMMUNEID = New Global.System.Data.DataColumn("COMMUNEID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMUNEID)
            Me.columnVALIDFROM = New Global.System.Data.DataColumn("VALIDFROM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALIDFROM)
            Me.columnVALIDTO = New Global.System.Data.DataColumn("VALIDTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALIDTO)
            Me.columnVILL_EN.MaxLength = 50
            Me.columnVILL_KH.MaxLength = 50
            Me.columnVILL_TYPE.MaxLength = 50
            Me.columnVALIDFROM.MaxLength = 50
            Me.columnVALIDTO.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTBL_VILLAGERow() As TBL_VILLAGERow
            Return CType(Me.NewRow,TBL_VILLAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TBL_VILLAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TBL_VILLAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TBL_VILLAGERowChangedEvent) Is Nothing) Then
                RaiseEvent TBL_VILLAGERowChanged(Me, New TBL_VILLAGERowChangeEvent(CType(e.Row,TBL_VILLAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TBL_VILLAGERowChangingEvent) Is Nothing) Then
                RaiseEvent TBL_VILLAGERowChanging(Me, New TBL_VILLAGERowChangeEvent(CType(e.Row,TBL_VILLAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TBL_VILLAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent TBL_VILLAGERowDeleted(Me, New TBL_VILLAGERowChangeEvent(CType(e.Row,TBL_VILLAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TBL_VILLAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent TBL_VILLAGERowDeleting(Me, New TBL_VILLAGERowChangeEvent(CType(e.Row,TBL_VILLAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTBL_VILLAGERow(ByVal row As TBL_VILLAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TBL_VILLAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_PEOPLE_VERIFICATIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of VIEW_PEOPLE_VERIFICATIONRow)
        
        Private columndocumentno As Global.System.Data.DataColumn
        
        Private columnbarcodeno As Global.System.Data.DataColumn
        
        Private columnsurname_khmer As Global.System.Data.DataColumn
        
        Private columngivenname_khmer As Global.System.Data.DataColumn
        
        Private columnKhmerName As Global.System.Data.DataColumn
        
        Private columnsurname_latin As Global.System.Data.DataColumn
        
        Private columngivenname_latin As Global.System.Data.DataColumn
        
        Private columnLatinName As Global.System.Data.DataColumn
        
        Private columnsex As Global.System.Data.DataColumn
        
        Private columndateofbirth As Global.System.Data.DataColumn
        
        Private columndate_of_registration As Global.System.Data.DataColumn
        
        Private columnpobvillage As Global.System.Data.DataColumn
        
        Private columnpobcommune As Global.System.Data.DataColumn
        
        Private columnpobdistrict As Global.System.Data.DataColumn
        
        Private columnpobprovince As Global.System.Data.DataColumn
        
        Private columnOldDress As Global.System.Data.DataColumn
        
        Private columnpolvillage As Global.System.Data.DataColumn
        
        Private columnpolcommune As Global.System.Data.DataColumn
        
        Private columnpoldistrict As Global.System.Data.DataColumn
        
        Private columnpolprovince As Global.System.Data.DataColumn
        
        Private columnCurrentAddress As Global.System.Data.DataColumn
        
        Private columnreason As Global.System.Data.DataColumn
        
        Private columnphoto As Global.System.Data.DataColumn
        
        Private columnother As Global.System.Data.DataColumn
        
        Private columnregistrationform As Global.System.Data.DataColumn
        
        Private columnVerBarcode As Global.System.Data.DataColumn
        
        Private columnVerSurnameKhmer As Global.System.Data.DataColumn
        
        Private columnVerGiveNamekhmer As Global.System.Data.DataColumn
        
        Private columnVerSurnameLatin As Global.System.Data.DataColumn
        
        Private columnVerGiveNameLatin As Global.System.Data.DataColumn
        
        Private columnVerSex As Global.System.Data.DataColumn
        
        Private columnVerDateOfBirth As Global.System.Data.DataColumn
        
        Private columnVerDateOfRegistration As Global.System.Data.DataColumn
        
        Private columnVerPobVillage As Global.System.Data.DataColumn
        
        Private columnVerPobCommune As Global.System.Data.DataColumn
        
        Private columnVerDistrict As Global.System.Data.DataColumn
        
        Private columnVerPobProvince As Global.System.Data.DataColumn
        
        Private columnVerPolVillage As Global.System.Data.DataColumn
        
        Private columnVerPolCommune As Global.System.Data.DataColumn
        
        Private columnVerPolDistrict As Global.System.Data.DataColumn
        
        Private columnVerPolProvince As Global.System.Data.DataColumn
        
        Private columnVerReason As Global.System.Data.DataColumn
        
        Private columnVerPhoto As Global.System.Data.DataColumn
        
        Private columnVerOther As Global.System.Data.DataColumn
        
        Private columnVerRegistrationform As Global.System.Data.DataColumn
        
        Private columnafisid As Global.System.Data.DataColumn
        
        Private columnPrinted As Global.System.Data.DataColumn
        
        Private columnVerification As Global.System.Data.DataColumn
        
        Private columnPrintDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_PEOPLE_VERIFICATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property documentnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocumentno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property barcodenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbarcodeno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property surname_khmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsurname_khmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property givenname_khmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngivenname_khmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KhmerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKhmerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property surname_latinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsurname_latin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property givenname_latinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngivenname_latin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LatinNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLatinName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateofbirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateofbirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property date_of_registrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate_of_registration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobvillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobvillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobcommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobcommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobdistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobdistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobprovinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobprovince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OldDressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldDress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property polvillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpolvillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property polcommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpolcommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property poldistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpoldistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property polprovinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpolprovince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property reasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property photoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property otherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnother
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrationformColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrationform
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerBarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerSurnameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerSurnameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerGiveNamekhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerGiveNamekhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerSurnameLatinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerSurnameLatin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerGiveNameLatinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerGiveNameLatin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerSexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerDateOfBirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerDateOfBirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerDateOfRegistrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerDateOfRegistration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPobVillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPobVillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPobCommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPobCommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerDistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPobProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPobProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPolVillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPolVillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPolCommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPolCommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPolDistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPolDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPolProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPolProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerReasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerReason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPhotoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPhoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerOtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerRegistrationformColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerRegistrationform
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property afisidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnafisid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrintDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PEOPLE_VERIFICATIONRow
            Get
                Return CType(Me.Rows(index),VIEW_PEOPLE_VERIFICATIONRow)
            End Get
        End Property
        
        Public Event VIEW_PEOPLE_VERIFICATIONRowChanging As VIEW_PEOPLE_VERIFICATIONRowChangeEventHandler
        
        Public Event VIEW_PEOPLE_VERIFICATIONRowChanged As VIEW_PEOPLE_VERIFICATIONRowChangeEventHandler
        
        Public Event VIEW_PEOPLE_VERIFICATIONRowDeleting As VIEW_PEOPLE_VERIFICATIONRowChangeEventHandler
        
        Public Event VIEW_PEOPLE_VERIFICATIONRowDeleted As VIEW_PEOPLE_VERIFICATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_PEOPLE_VERIFICATIONRow(ByVal row As VIEW_PEOPLE_VERIFICATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_PEOPLE_VERIFICATIONRow( _
                    ByVal documentno As String,  _
                    ByVal barcodeno As String,  _
                    ByVal surname_khmer As String,  _
                    ByVal givenname_khmer As String,  _
                    ByVal KhmerName As String,  _
                    ByVal surname_latin As String,  _
                    ByVal givenname_latin As String,  _
                    ByVal LatinName As String,  _
                    ByVal sex As String,  _
                    ByVal dateofbirth As Date,  _
                    ByVal date_of_registration As Date,  _
                    ByVal pobvillage As String,  _
                    ByVal pobcommune As String,  _
                    ByVal pobdistrict As String,  _
                    ByVal pobprovince As String,  _
                    ByVal OldDress As String,  _
                    ByVal polvillage As String,  _
                    ByVal polcommune As String,  _
                    ByVal poldistrict As String,  _
                    ByVal polprovince As String,  _
                    ByVal CurrentAddress As String,  _
                    ByVal reason As String,  _
                    ByVal photo() As Byte,  _
                    ByVal other As String,  _
                    ByVal registrationform() As Byte,  _
                    ByVal VerBarcode As String,  _
                    ByVal VerSurnameKhmer As String,  _
                    ByVal VerGiveNamekhmer As String,  _
                    ByVal VerSurnameLatin As String,  _
                    ByVal VerGiveNameLatin As String,  _
                    ByVal VerSex As String,  _
                    ByVal VerDateOfBirth As Date,  _
                    ByVal VerDateOfRegistration As Date,  _
                    ByVal VerPobVillage As String,  _
                    ByVal VerPobCommune As String,  _
                    ByVal VerDistrict As String,  _
                    ByVal VerPobProvince As String,  _
                    ByVal VerPolVillage As String,  _
                    ByVal VerPolCommune As String,  _
                    ByVal VerPolDistrict As String,  _
                    ByVal VerPolProvince As String,  _
                    ByVal VerReason As String,  _
                    ByVal VerPhoto() As Byte,  _
                    ByVal VerOther As String,  _
                    ByVal VerRegistrationform() As Byte,  _
                    ByVal afisid As Integer,  _
                    ByVal Printed As String,  _
                    ByVal Verification As String,  _
                    ByVal PrintDate As Date) As VIEW_PEOPLE_VERIFICATIONRow
            Dim rowVIEW_PEOPLE_VERIFICATIONRow As VIEW_PEOPLE_VERIFICATIONRow = CType(Me.NewRow,VIEW_PEOPLE_VERIFICATIONRow)
            Dim columnValuesArray() As Object = New Object() {documentno, barcodeno, surname_khmer, givenname_khmer, KhmerName, surname_latin, givenname_latin, LatinName, sex, dateofbirth, date_of_registration, pobvillage, pobcommune, pobdistrict, pobprovince, OldDress, polvillage, polcommune, poldistrict, polprovince, CurrentAddress, reason, photo, other, registrationform, VerBarcode, VerSurnameKhmer, VerGiveNamekhmer, VerSurnameLatin, VerGiveNameLatin, VerSex, VerDateOfBirth, VerDateOfRegistration, VerPobVillage, VerPobCommune, VerDistrict, VerPobProvince, VerPolVillage, VerPolCommune, VerPolDistrict, VerPolProvince, VerReason, VerPhoto, VerOther, VerRegistrationform, afisid, Printed, Verification, PrintDate}
            rowVIEW_PEOPLE_VERIFICATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_PEOPLE_VERIFICATIONRow)
            Return rowVIEW_PEOPLE_VERIFICATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_PEOPLE_VERIFICATIONDataTable = CType(MyBase.Clone,VIEW_PEOPLE_VERIFICATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_PEOPLE_VERIFICATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndocumentno = MyBase.Columns("documentno")
            Me.columnbarcodeno = MyBase.Columns("barcodeno")
            Me.columnsurname_khmer = MyBase.Columns("surname_khmer")
            Me.columngivenname_khmer = MyBase.Columns("givenname_khmer")
            Me.columnKhmerName = MyBase.Columns("KhmerName")
            Me.columnsurname_latin = MyBase.Columns("surname_latin")
            Me.columngivenname_latin = MyBase.Columns("givenname_latin")
            Me.columnLatinName = MyBase.Columns("LatinName")
            Me.columnsex = MyBase.Columns("sex")
            Me.columndateofbirth = MyBase.Columns("dateofbirth")
            Me.columndate_of_registration = MyBase.Columns("date_of_registration")
            Me.columnpobvillage = MyBase.Columns("pobvillage")
            Me.columnpobcommune = MyBase.Columns("pobcommune")
            Me.columnpobdistrict = MyBase.Columns("pobdistrict")
            Me.columnpobprovince = MyBase.Columns("pobprovince")
            Me.columnOldDress = MyBase.Columns("OldDress")
            Me.columnpolvillage = MyBase.Columns("polvillage")
            Me.columnpolcommune = MyBase.Columns("polcommune")
            Me.columnpoldistrict = MyBase.Columns("poldistrict")
            Me.columnpolprovince = MyBase.Columns("polprovince")
            Me.columnCurrentAddress = MyBase.Columns("CurrentAddress")
            Me.columnreason = MyBase.Columns("reason")
            Me.columnphoto = MyBase.Columns("photo")
            Me.columnother = MyBase.Columns("other")
            Me.columnregistrationform = MyBase.Columns("registrationform")
            Me.columnVerBarcode = MyBase.Columns("VerBarcode")
            Me.columnVerSurnameKhmer = MyBase.Columns("VerSurnameKhmer")
            Me.columnVerGiveNamekhmer = MyBase.Columns("VerGiveNamekhmer")
            Me.columnVerSurnameLatin = MyBase.Columns("VerSurnameLatin")
            Me.columnVerGiveNameLatin = MyBase.Columns("VerGiveNameLatin")
            Me.columnVerSex = MyBase.Columns("VerSex")
            Me.columnVerDateOfBirth = MyBase.Columns("VerDateOfBirth")
            Me.columnVerDateOfRegistration = MyBase.Columns("VerDateOfRegistration")
            Me.columnVerPobVillage = MyBase.Columns("VerPobVillage")
            Me.columnVerPobCommune = MyBase.Columns("VerPobCommune")
            Me.columnVerDistrict = MyBase.Columns("VerDistrict")
            Me.columnVerPobProvince = MyBase.Columns("VerPobProvince")
            Me.columnVerPolVillage = MyBase.Columns("VerPolVillage")
            Me.columnVerPolCommune = MyBase.Columns("VerPolCommune")
            Me.columnVerPolDistrict = MyBase.Columns("VerPolDistrict")
            Me.columnVerPolProvince = MyBase.Columns("VerPolProvince")
            Me.columnVerReason = MyBase.Columns("VerReason")
            Me.columnVerPhoto = MyBase.Columns("VerPhoto")
            Me.columnVerOther = MyBase.Columns("VerOther")
            Me.columnVerRegistrationform = MyBase.Columns("VerRegistrationform")
            Me.columnafisid = MyBase.Columns("afisid")
            Me.columnPrinted = MyBase.Columns("Printed")
            Me.columnVerification = MyBase.Columns("Verification")
            Me.columnPrintDate = MyBase.Columns("PrintDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndocumentno = New Global.System.Data.DataColumn("documentno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocumentno)
            Me.columnbarcodeno = New Global.System.Data.DataColumn("barcodeno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbarcodeno)
            Me.columnsurname_khmer = New Global.System.Data.DataColumn("surname_khmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsurname_khmer)
            Me.columngivenname_khmer = New Global.System.Data.DataColumn("givenname_khmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngivenname_khmer)
            Me.columnKhmerName = New Global.System.Data.DataColumn("KhmerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKhmerName)
            Me.columnsurname_latin = New Global.System.Data.DataColumn("surname_latin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsurname_latin)
            Me.columngivenname_latin = New Global.System.Data.DataColumn("givenname_latin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngivenname_latin)
            Me.columnLatinName = New Global.System.Data.DataColumn("LatinName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLatinName)
            Me.columnsex = New Global.System.Data.DataColumn("sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsex)
            Me.columndateofbirth = New Global.System.Data.DataColumn("dateofbirth", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateofbirth)
            Me.columndate_of_registration = New Global.System.Data.DataColumn("date_of_registration", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndate_of_registration)
            Me.columnpobvillage = New Global.System.Data.DataColumn("pobvillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobvillage)
            Me.columnpobcommune = New Global.System.Data.DataColumn("pobcommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobcommune)
            Me.columnpobdistrict = New Global.System.Data.DataColumn("pobdistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobdistrict)
            Me.columnpobprovince = New Global.System.Data.DataColumn("pobprovince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobprovince)
            Me.columnOldDress = New Global.System.Data.DataColumn("OldDress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldDress)
            Me.columnpolvillage = New Global.System.Data.DataColumn("polvillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpolvillage)
            Me.columnpolcommune = New Global.System.Data.DataColumn("polcommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpolcommune)
            Me.columnpoldistrict = New Global.System.Data.DataColumn("poldistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpoldistrict)
            Me.columnpolprovince = New Global.System.Data.DataColumn("polprovince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpolprovince)
            Me.columnCurrentAddress = New Global.System.Data.DataColumn("CurrentAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentAddress)
            Me.columnreason = New Global.System.Data.DataColumn("reason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreason)
            Me.columnphoto = New Global.System.Data.DataColumn("photo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphoto)
            Me.columnother = New Global.System.Data.DataColumn("other", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnother)
            Me.columnregistrationform = New Global.System.Data.DataColumn("registrationform", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrationform)
            Me.columnVerBarcode = New Global.System.Data.DataColumn("VerBarcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerBarcode)
            Me.columnVerSurnameKhmer = New Global.System.Data.DataColumn("VerSurnameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerSurnameKhmer)
            Me.columnVerGiveNamekhmer = New Global.System.Data.DataColumn("VerGiveNamekhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerGiveNamekhmer)
            Me.columnVerSurnameLatin = New Global.System.Data.DataColumn("VerSurnameLatin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerSurnameLatin)
            Me.columnVerGiveNameLatin = New Global.System.Data.DataColumn("VerGiveNameLatin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerGiveNameLatin)
            Me.columnVerSex = New Global.System.Data.DataColumn("VerSex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerSex)
            Me.columnVerDateOfBirth = New Global.System.Data.DataColumn("VerDateOfBirth", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerDateOfBirth)
            Me.columnVerDateOfRegistration = New Global.System.Data.DataColumn("VerDateOfRegistration", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerDateOfRegistration)
            Me.columnVerPobVillage = New Global.System.Data.DataColumn("VerPobVillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPobVillage)
            Me.columnVerPobCommune = New Global.System.Data.DataColumn("VerPobCommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPobCommune)
            Me.columnVerDistrict = New Global.System.Data.DataColumn("VerDistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerDistrict)
            Me.columnVerPobProvince = New Global.System.Data.DataColumn("VerPobProvince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPobProvince)
            Me.columnVerPolVillage = New Global.System.Data.DataColumn("VerPolVillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPolVillage)
            Me.columnVerPolCommune = New Global.System.Data.DataColumn("VerPolCommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPolCommune)
            Me.columnVerPolDistrict = New Global.System.Data.DataColumn("VerPolDistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPolDistrict)
            Me.columnVerPolProvince = New Global.System.Data.DataColumn("VerPolProvince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPolProvince)
            Me.columnVerReason = New Global.System.Data.DataColumn("VerReason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerReason)
            Me.columnVerPhoto = New Global.System.Data.DataColumn("VerPhoto", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPhoto)
            Me.columnVerOther = New Global.System.Data.DataColumn("VerOther", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerOther)
            Me.columnVerRegistrationform = New Global.System.Data.DataColumn("VerRegistrationform", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerRegistrationform)
            Me.columnafisid = New Global.System.Data.DataColumn("afisid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnafisid)
            Me.columnPrinted = New Global.System.Data.DataColumn("Printed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinted)
            Me.columnVerification = New Global.System.Data.DataColumn("Verification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerification)
            Me.columnPrintDate = New Global.System.Data.DataColumn("PrintDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrintDate)
            Me.columndocumentno.AllowDBNull = false
            Me.columndocumentno.MaxLength = 50
            Me.columnbarcodeno.MaxLength = 50
            Me.columnsurname_khmer.MaxLength = 50
            Me.columngivenname_khmer.MaxLength = 50
            Me.columnKhmerName.ReadOnly = true
            Me.columnKhmerName.MaxLength = 101
            Me.columnsurname_latin.MaxLength = 50
            Me.columngivenname_latin.MaxLength = 50
            Me.columnLatinName.ReadOnly = true
            Me.columnLatinName.MaxLength = 101
            Me.columnsex.MaxLength = 10
            Me.columnpobvillage.MaxLength = 50
            Me.columnpobcommune.MaxLength = 50
            Me.columnpobdistrict.MaxLength = 50
            Me.columnpobprovince.MaxLength = 50
            Me.columnOldDress.ReadOnly = true
            Me.columnOldDress.MaxLength = 203
            Me.columnpolvillage.MaxLength = 50
            Me.columnpolcommune.MaxLength = 50
            Me.columnpoldistrict.MaxLength = 50
            Me.columnpolprovince.MaxLength = 50
            Me.columnCurrentAddress.ReadOnly = true
            Me.columnCurrentAddress.MaxLength = 203
            Me.columnreason.MaxLength = 50
            Me.columnother.MaxLength = 50
            Me.columnVerBarcode.MaxLength = 50
            Me.columnVerSurnameKhmer.MaxLength = 50
            Me.columnVerGiveNamekhmer.MaxLength = 50
            Me.columnVerSurnameLatin.MaxLength = 50
            Me.columnVerGiveNameLatin.MaxLength = 50
            Me.columnVerSex.MaxLength = 10
            Me.columnVerPobVillage.MaxLength = 50
            Me.columnVerPobCommune.MaxLength = 50
            Me.columnVerDistrict.MaxLength = 50
            Me.columnVerPobProvince.MaxLength = 50
            Me.columnVerPolVillage.MaxLength = 50
            Me.columnVerPolCommune.MaxLength = 50
            Me.columnVerPolDistrict.MaxLength = 50
            Me.columnVerPolProvince.MaxLength = 50
            Me.columnVerReason.MaxLength = 50
            Me.columnVerOther.MaxLength = 50
            Me.columnafisid.AllowDBNull = false
            Me.columnPrinted.MaxLength = 1
            Me.columnVerification.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_PEOPLE_VERIFICATIONRow() As VIEW_PEOPLE_VERIFICATIONRow
            Return CType(Me.NewRow,VIEW_PEOPLE_VERIFICATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_PEOPLE_VERIFICATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_PEOPLE_VERIFICATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PEOPLE_VERIFICATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PEOPLE_VERIFICATIONRowChanged(Me, New VIEW_PEOPLE_VERIFICATIONRowChangeEvent(CType(e.Row,VIEW_PEOPLE_VERIFICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PEOPLE_VERIFICATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PEOPLE_VERIFICATIONRowChanging(Me, New VIEW_PEOPLE_VERIFICATIONRowChangeEvent(CType(e.Row,VIEW_PEOPLE_VERIFICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PEOPLE_VERIFICATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PEOPLE_VERIFICATIONRowDeleted(Me, New VIEW_PEOPLE_VERIFICATIONRowChangeEvent(CType(e.Row,VIEW_PEOPLE_VERIFICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PEOPLE_VERIFICATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PEOPLE_VERIFICATIONRowDeleting(Me, New VIEW_PEOPLE_VERIFICATIONRowChangeEvent(CType(e.Row,VIEW_PEOPLE_VERIFICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_PEOPLE_VERIFICATIONRow(ByVal row As VIEW_PEOPLE_VERIFICATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_PEOPLE_VERIFICATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbl_verificationDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbl_verificationRow)
        
        Private columnafisid As Global.System.Data.DataColumn
        
        Private columnold_id As Global.System.Data.DataColumn
        
        Private columnsurname_khmer As Global.System.Data.DataColumn
        
        Private columnbarcodeno As Global.System.Data.DataColumn
        
        Private columngivenname_khmer As Global.System.Data.DataColumn
        
        Private columnsurname_latin As Global.System.Data.DataColumn
        
        Private columngivenname_latin As Global.System.Data.DataColumn
        
        Private columnsex As Global.System.Data.DataColumn
        
        Private columndateofbirth As Global.System.Data.DataColumn
        
        Private columndate_of_registration As Global.System.Data.DataColumn
        
        Private columnpobvillage As Global.System.Data.DataColumn
        
        Private columnpobcommune As Global.System.Data.DataColumn
        
        Private columnpobdistrict As Global.System.Data.DataColumn
        
        Private columnpobprovince As Global.System.Data.DataColumn
        
        Private columnpolvillage As Global.System.Data.DataColumn
        
        Private columnpolcommune As Global.System.Data.DataColumn
        
        Private columnpoldistrict As Global.System.Data.DataColumn
        
        Private columnpolprovince As Global.System.Data.DataColumn
        
        Private columnreason As Global.System.Data.DataColumn
        
        Private columnphoto As Global.System.Data.DataColumn
        
        Private columnother As Global.System.Data.DataColumn
        
        Private columnregistrationform As Global.System.Data.DataColumn
        
        Private columnPrinted As Global.System.Data.DataColumn
        
        Private columnVerification As Global.System.Data.DataColumn
        
        Private columnPrintDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbl_verification"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property afisidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnafisid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property old_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnold_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property surname_khmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsurname_khmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property barcodenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbarcodeno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property givenname_khmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngivenname_khmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property surname_latinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsurname_latin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property givenname_latinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngivenname_latin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateofbirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateofbirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property date_of_registrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate_of_registration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobvillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobvillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobcommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobcommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobdistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobdistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobprovinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobprovince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property polvillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpolvillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property polcommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpolcommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property poldistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpoldistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property polprovinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpolprovince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property reasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property photoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property otherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnother
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrationformColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrationform
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrintDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbl_verificationRow
            Get
                Return CType(Me.Rows(index),tbl_verificationRow)
            End Get
        End Property
        
        Public Event tbl_verificationRowChanging As tbl_verificationRowChangeEventHandler
        
        Public Event tbl_verificationRowChanged As tbl_verificationRowChangeEventHandler
        
        Public Event tbl_verificationRowDeleting As tbl_verificationRowChangeEventHandler
        
        Public Event tbl_verificationRowDeleted As tbl_verificationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtbl_verificationRow(ByVal row As tbl_verificationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtbl_verificationRow( _
                    ByVal afisid As Integer,  _
                    ByVal old_id As String,  _
                    ByVal surname_khmer As String,  _
                    ByVal barcodeno As String,  _
                    ByVal givenname_khmer As String,  _
                    ByVal surname_latin As String,  _
                    ByVal givenname_latin As String,  _
                    ByVal sex As String,  _
                    ByVal dateofbirth As Date,  _
                    ByVal date_of_registration As Date,  _
                    ByVal pobvillage As String,  _
                    ByVal pobcommune As String,  _
                    ByVal pobdistrict As String,  _
                    ByVal pobprovince As String,  _
                    ByVal polvillage As String,  _
                    ByVal polcommune As String,  _
                    ByVal poldistrict As String,  _
                    ByVal polprovince As String,  _
                    ByVal reason As String,  _
                    ByVal photo() As Byte,  _
                    ByVal other As String,  _
                    ByVal registrationform() As Byte,  _
                    ByVal Printed As String,  _
                    ByVal Verification As String,  _
                    ByVal PrintDate As Date) As tbl_verificationRow
            Dim rowtbl_verificationRow As tbl_verificationRow = CType(Me.NewRow,tbl_verificationRow)
            Dim columnValuesArray() As Object = New Object() {afisid, old_id, surname_khmer, barcodeno, givenname_khmer, surname_latin, givenname_latin, sex, dateofbirth, date_of_registration, pobvillage, pobcommune, pobdistrict, pobprovince, polvillage, polcommune, poldistrict, polprovince, reason, photo, other, registrationform, Printed, Verification, PrintDate}
            rowtbl_verificationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbl_verificationRow)
            Return rowtbl_verificationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbl_verificationDataTable = CType(MyBase.Clone,tbl_verificationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbl_verificationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnafisid = MyBase.Columns("afisid")
            Me.columnold_id = MyBase.Columns("old_id")
            Me.columnsurname_khmer = MyBase.Columns("surname_khmer")
            Me.columnbarcodeno = MyBase.Columns("barcodeno")
            Me.columngivenname_khmer = MyBase.Columns("givenname_khmer")
            Me.columnsurname_latin = MyBase.Columns("surname_latin")
            Me.columngivenname_latin = MyBase.Columns("givenname_latin")
            Me.columnsex = MyBase.Columns("sex")
            Me.columndateofbirth = MyBase.Columns("dateofbirth")
            Me.columndate_of_registration = MyBase.Columns("date_of_registration")
            Me.columnpobvillage = MyBase.Columns("pobvillage")
            Me.columnpobcommune = MyBase.Columns("pobcommune")
            Me.columnpobdistrict = MyBase.Columns("pobdistrict")
            Me.columnpobprovince = MyBase.Columns("pobprovince")
            Me.columnpolvillage = MyBase.Columns("polvillage")
            Me.columnpolcommune = MyBase.Columns("polcommune")
            Me.columnpoldistrict = MyBase.Columns("poldistrict")
            Me.columnpolprovince = MyBase.Columns("polprovince")
            Me.columnreason = MyBase.Columns("reason")
            Me.columnphoto = MyBase.Columns("photo")
            Me.columnother = MyBase.Columns("other")
            Me.columnregistrationform = MyBase.Columns("registrationform")
            Me.columnPrinted = MyBase.Columns("Printed")
            Me.columnVerification = MyBase.Columns("Verification")
            Me.columnPrintDate = MyBase.Columns("PrintDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnafisid = New Global.System.Data.DataColumn("afisid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnafisid)
            Me.columnold_id = New Global.System.Data.DataColumn("old_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnold_id)
            Me.columnsurname_khmer = New Global.System.Data.DataColumn("surname_khmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsurname_khmer)
            Me.columnbarcodeno = New Global.System.Data.DataColumn("barcodeno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbarcodeno)
            Me.columngivenname_khmer = New Global.System.Data.DataColumn("givenname_khmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngivenname_khmer)
            Me.columnsurname_latin = New Global.System.Data.DataColumn("surname_latin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsurname_latin)
            Me.columngivenname_latin = New Global.System.Data.DataColumn("givenname_latin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngivenname_latin)
            Me.columnsex = New Global.System.Data.DataColumn("sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsex)
            Me.columndateofbirth = New Global.System.Data.DataColumn("dateofbirth", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateofbirth)
            Me.columndate_of_registration = New Global.System.Data.DataColumn("date_of_registration", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndate_of_registration)
            Me.columnpobvillage = New Global.System.Data.DataColumn("pobvillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobvillage)
            Me.columnpobcommune = New Global.System.Data.DataColumn("pobcommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobcommune)
            Me.columnpobdistrict = New Global.System.Data.DataColumn("pobdistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobdistrict)
            Me.columnpobprovince = New Global.System.Data.DataColumn("pobprovince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobprovince)
            Me.columnpolvillage = New Global.System.Data.DataColumn("polvillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpolvillage)
            Me.columnpolcommune = New Global.System.Data.DataColumn("polcommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpolcommune)
            Me.columnpoldistrict = New Global.System.Data.DataColumn("poldistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpoldistrict)
            Me.columnpolprovince = New Global.System.Data.DataColumn("polprovince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpolprovince)
            Me.columnreason = New Global.System.Data.DataColumn("reason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreason)
            Me.columnphoto = New Global.System.Data.DataColumn("photo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphoto)
            Me.columnother = New Global.System.Data.DataColumn("other", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnother)
            Me.columnregistrationform = New Global.System.Data.DataColumn("registrationform", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrationform)
            Me.columnPrinted = New Global.System.Data.DataColumn("Printed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinted)
            Me.columnVerification = New Global.System.Data.DataColumn("Verification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerification)
            Me.columnPrintDate = New Global.System.Data.DataColumn("PrintDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrintDate)
            Me.columnafisid.AllowDBNull = false
            Me.columnold_id.MaxLength = 50
            Me.columnsurname_khmer.MaxLength = 50
            Me.columnbarcodeno.MaxLength = 50
            Me.columngivenname_khmer.MaxLength = 50
            Me.columnsurname_latin.MaxLength = 50
            Me.columngivenname_latin.MaxLength = 50
            Me.columnsex.MaxLength = 10
            Me.columnpobvillage.MaxLength = 50
            Me.columnpobcommune.MaxLength = 50
            Me.columnpobdistrict.MaxLength = 50
            Me.columnpobprovince.MaxLength = 50
            Me.columnpolvillage.MaxLength = 50
            Me.columnpolcommune.MaxLength = 50
            Me.columnpoldistrict.MaxLength = 50
            Me.columnpolprovince.MaxLength = 50
            Me.columnreason.MaxLength = 50
            Me.columnother.MaxLength = 50
            Me.columnPrinted.MaxLength = 1
            Me.columnVerification.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtbl_verificationRow() As tbl_verificationRow
            Return CType(Me.NewRow,tbl_verificationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbl_verificationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbl_verificationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbl_verificationRowChangedEvent) Is Nothing) Then
                RaiseEvent tbl_verificationRowChanged(Me, New tbl_verificationRowChangeEvent(CType(e.Row,tbl_verificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbl_verificationRowChangingEvent) Is Nothing) Then
                RaiseEvent tbl_verificationRowChanging(Me, New tbl_verificationRowChangeEvent(CType(e.Row,tbl_verificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbl_verificationRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbl_verificationRowDeleted(Me, New tbl_verificationRowChangeEvent(CType(e.Row,tbl_verificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbl_verificationRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbl_verificationRowDeleting(Me, New tbl_verificationRowChangeEvent(CType(e.Row,tbl_verificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetbl_verificationRow(ByVal row As tbl_verificationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbl_verificationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TblFormVerifyDataTable
        Inherits Global.System.Data.TypedTableBase(Of TblFormVerifyRow)
        
        Private columndocumentno As Global.System.Data.DataColumn
        
        Private columnbarcodeno As Global.System.Data.DataColumn
        
        Private columnsurname_khmer As Global.System.Data.DataColumn
        
        Private columngivenname_khmer As Global.System.Data.DataColumn
        
        Private columnKhmerName As Global.System.Data.DataColumn
        
        Private columnsurname_latin As Global.System.Data.DataColumn
        
        Private columngivenname_latin As Global.System.Data.DataColumn
        
        Private columnLatinName As Global.System.Data.DataColumn
        
        Private columnsex As Global.System.Data.DataColumn
        
        Private columndateofbirth As Global.System.Data.DataColumn
        
        Private columndate_of_registration As Global.System.Data.DataColumn
        
        Private columnpobvillage As Global.System.Data.DataColumn
        
        Private columnpobcommune As Global.System.Data.DataColumn
        
        Private columnpobdistrict As Global.System.Data.DataColumn
        
        Private columnpobprovince As Global.System.Data.DataColumn
        
        Private columnOldDress As Global.System.Data.DataColumn
        
        Private columnpolvillage As Global.System.Data.DataColumn
        
        Private columnpolcommune As Global.System.Data.DataColumn
        
        Private columnpoldistrict As Global.System.Data.DataColumn
        
        Private columnpolprovince As Global.System.Data.DataColumn
        
        Private columnCurrentAddress As Global.System.Data.DataColumn
        
        Private columnreason As Global.System.Data.DataColumn
        
        Private columnphoto As Global.System.Data.DataColumn
        
        Private columnother As Global.System.Data.DataColumn
        
        Private columnregistrationform As Global.System.Data.DataColumn
        
        Private columnVerBarcode As Global.System.Data.DataColumn
        
        Private columnVerSurnameKhmer As Global.System.Data.DataColumn
        
        Private columnVerGiveNamekhmer As Global.System.Data.DataColumn
        
        Private columnVerSurnameLatin As Global.System.Data.DataColumn
        
        Private columnVerGiveNameLatin As Global.System.Data.DataColumn
        
        Private columnVerSex As Global.System.Data.DataColumn
        
        Private columnVerDateOfBirth As Global.System.Data.DataColumn
        
        Private columnVerDateOfRegistration As Global.System.Data.DataColumn
        
        Private columnVerPobVillage As Global.System.Data.DataColumn
        
        Private columnVerPobCommune As Global.System.Data.DataColumn
        
        Private columnVerDistrict As Global.System.Data.DataColumn
        
        Private columnVerPobProvince As Global.System.Data.DataColumn
        
        Private columnVerPolVillage As Global.System.Data.DataColumn
        
        Private columnVerPolCommune As Global.System.Data.DataColumn
        
        Private columnVerPolDistrict As Global.System.Data.DataColumn
        
        Private columnVerPolProvince As Global.System.Data.DataColumn
        
        Private columnVerReason As Global.System.Data.DataColumn
        
        Private columnVerPhoto As Global.System.Data.DataColumn
        
        Private columnVerOther As Global.System.Data.DataColumn
        
        Private columnVerRegistrationform As Global.System.Data.DataColumn
        
        Private columnafisid As Global.System.Data.DataColumn
        
        Private columnPrinted As Global.System.Data.DataColumn
        
        Private columnVerification As Global.System.Data.DataColumn
        
        Private columnPrintDate As Global.System.Data.DataColumn
        
        Private columnVerifKhmerName As Global.System.Data.DataColumn
        
        Private columnVerifLatinName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TblFormVerify"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property documentnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocumentno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property barcodenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbarcodeno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property surname_khmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsurname_khmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property givenname_khmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngivenname_khmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KhmerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKhmerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property surname_latinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsurname_latin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property givenname_latinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngivenname_latin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LatinNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLatinName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateofbirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateofbirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property date_of_registrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate_of_registration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobvillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobvillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobcommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobcommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobdistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobdistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pobprovinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpobprovince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OldDressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldDress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property polvillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpolvillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property polcommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpolcommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property poldistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpoldistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property polprovinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpolprovince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property reasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property photoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property otherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnother
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrationformColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrationform
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerBarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerSurnameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerSurnameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerGiveNamekhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerGiveNamekhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerSurnameLatinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerSurnameLatin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerGiveNameLatinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerGiveNameLatin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerSexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerDateOfBirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerDateOfBirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerDateOfRegistrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerDateOfRegistration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPobVillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPobVillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPobCommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPobCommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerDistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPobProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPobProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPolVillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPolVillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPolCommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPolCommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPolDistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPolDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPolProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPolProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerReasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerReason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerPhotoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerPhoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerOtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerRegistrationformColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerRegistrationform
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property afisidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnafisid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrintDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerifKhmerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerifKhmerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerifLatinNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerifLatinName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TblFormVerifyRow
            Get
                Return CType(Me.Rows(index),TblFormVerifyRow)
            End Get
        End Property
        
        Public Event TblFormVerifyRowChanging As TblFormVerifyRowChangeEventHandler
        
        Public Event TblFormVerifyRowChanged As TblFormVerifyRowChangeEventHandler
        
        Public Event TblFormVerifyRowDeleting As TblFormVerifyRowChangeEventHandler
        
        Public Event TblFormVerifyRowDeleted As TblFormVerifyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTblFormVerifyRow(ByVal row As TblFormVerifyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTblFormVerifyRow( _
                    ByVal documentno As String,  _
                    ByVal barcodeno As String,  _
                    ByVal surname_khmer As String,  _
                    ByVal givenname_khmer As String,  _
                    ByVal KhmerName As String,  _
                    ByVal surname_latin As String,  _
                    ByVal givenname_latin As String,  _
                    ByVal LatinName As String,  _
                    ByVal sex As String,  _
                    ByVal dateofbirth As Date,  _
                    ByVal date_of_registration As Date,  _
                    ByVal pobvillage As String,  _
                    ByVal pobcommune As String,  _
                    ByVal pobdistrict As String,  _
                    ByVal pobprovince As String,  _
                    ByVal OldDress As String,  _
                    ByVal polvillage As String,  _
                    ByVal polcommune As String,  _
                    ByVal poldistrict As String,  _
                    ByVal polprovince As String,  _
                    ByVal CurrentAddress As String,  _
                    ByVal reason As String,  _
                    ByVal photo() As Byte,  _
                    ByVal other As String,  _
                    ByVal registrationform() As Byte,  _
                    ByVal VerBarcode As String,  _
                    ByVal VerSurnameKhmer As String,  _
                    ByVal VerGiveNamekhmer As String,  _
                    ByVal VerSurnameLatin As String,  _
                    ByVal VerGiveNameLatin As String,  _
                    ByVal VerSex As String,  _
                    ByVal VerDateOfBirth As Date,  _
                    ByVal VerDateOfRegistration As Date,  _
                    ByVal VerPobVillage As String,  _
                    ByVal VerPobCommune As String,  _
                    ByVal VerDistrict As String,  _
                    ByVal VerPobProvince As String,  _
                    ByVal VerPolVillage As String,  _
                    ByVal VerPolCommune As String,  _
                    ByVal VerPolDistrict As String,  _
                    ByVal VerPolProvince As String,  _
                    ByVal VerReason As String,  _
                    ByVal VerPhoto() As Byte,  _
                    ByVal VerOther As String,  _
                    ByVal VerRegistrationform() As Byte,  _
                    ByVal afisid As Integer,  _
                    ByVal Printed As String,  _
                    ByVal Verification As String,  _
                    ByVal PrintDate As Date,  _
                    ByVal VerifKhmerName As String,  _
                    ByVal VerifLatinName As String) As TblFormVerifyRow
            Dim rowTblFormVerifyRow As TblFormVerifyRow = CType(Me.NewRow,TblFormVerifyRow)
            Dim columnValuesArray() As Object = New Object() {documentno, barcodeno, surname_khmer, givenname_khmer, KhmerName, surname_latin, givenname_latin, LatinName, sex, dateofbirth, date_of_registration, pobvillage, pobcommune, pobdistrict, pobprovince, OldDress, polvillage, polcommune, poldistrict, polprovince, CurrentAddress, reason, photo, other, registrationform, VerBarcode, VerSurnameKhmer, VerGiveNamekhmer, VerSurnameLatin, VerGiveNameLatin, VerSex, VerDateOfBirth, VerDateOfRegistration, VerPobVillage, VerPobCommune, VerDistrict, VerPobProvince, VerPolVillage, VerPolCommune, VerPolDistrict, VerPolProvince, VerReason, VerPhoto, VerOther, VerRegistrationform, afisid, Printed, Verification, PrintDate, VerifKhmerName, VerifLatinName}
            rowTblFormVerifyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTblFormVerifyRow)
            Return rowTblFormVerifyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TblFormVerifyDataTable = CType(MyBase.Clone,TblFormVerifyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TblFormVerifyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndocumentno = MyBase.Columns("documentno")
            Me.columnbarcodeno = MyBase.Columns("barcodeno")
            Me.columnsurname_khmer = MyBase.Columns("surname_khmer")
            Me.columngivenname_khmer = MyBase.Columns("givenname_khmer")
            Me.columnKhmerName = MyBase.Columns("KhmerName")
            Me.columnsurname_latin = MyBase.Columns("surname_latin")
            Me.columngivenname_latin = MyBase.Columns("givenname_latin")
            Me.columnLatinName = MyBase.Columns("LatinName")
            Me.columnsex = MyBase.Columns("sex")
            Me.columndateofbirth = MyBase.Columns("dateofbirth")
            Me.columndate_of_registration = MyBase.Columns("date_of_registration")
            Me.columnpobvillage = MyBase.Columns("pobvillage")
            Me.columnpobcommune = MyBase.Columns("pobcommune")
            Me.columnpobdistrict = MyBase.Columns("pobdistrict")
            Me.columnpobprovince = MyBase.Columns("pobprovince")
            Me.columnOldDress = MyBase.Columns("OldDress")
            Me.columnpolvillage = MyBase.Columns("polvillage")
            Me.columnpolcommune = MyBase.Columns("polcommune")
            Me.columnpoldistrict = MyBase.Columns("poldistrict")
            Me.columnpolprovince = MyBase.Columns("polprovince")
            Me.columnCurrentAddress = MyBase.Columns("CurrentAddress")
            Me.columnreason = MyBase.Columns("reason")
            Me.columnphoto = MyBase.Columns("photo")
            Me.columnother = MyBase.Columns("other")
            Me.columnregistrationform = MyBase.Columns("registrationform")
            Me.columnVerBarcode = MyBase.Columns("VerBarcode")
            Me.columnVerSurnameKhmer = MyBase.Columns("VerSurnameKhmer")
            Me.columnVerGiveNamekhmer = MyBase.Columns("VerGiveNamekhmer")
            Me.columnVerSurnameLatin = MyBase.Columns("VerSurnameLatin")
            Me.columnVerGiveNameLatin = MyBase.Columns("VerGiveNameLatin")
            Me.columnVerSex = MyBase.Columns("VerSex")
            Me.columnVerDateOfBirth = MyBase.Columns("VerDateOfBirth")
            Me.columnVerDateOfRegistration = MyBase.Columns("VerDateOfRegistration")
            Me.columnVerPobVillage = MyBase.Columns("VerPobVillage")
            Me.columnVerPobCommune = MyBase.Columns("VerPobCommune")
            Me.columnVerDistrict = MyBase.Columns("VerDistrict")
            Me.columnVerPobProvince = MyBase.Columns("VerPobProvince")
            Me.columnVerPolVillage = MyBase.Columns("VerPolVillage")
            Me.columnVerPolCommune = MyBase.Columns("VerPolCommune")
            Me.columnVerPolDistrict = MyBase.Columns("VerPolDistrict")
            Me.columnVerPolProvince = MyBase.Columns("VerPolProvince")
            Me.columnVerReason = MyBase.Columns("VerReason")
            Me.columnVerPhoto = MyBase.Columns("VerPhoto")
            Me.columnVerOther = MyBase.Columns("VerOther")
            Me.columnVerRegistrationform = MyBase.Columns("VerRegistrationform")
            Me.columnafisid = MyBase.Columns("afisid")
            Me.columnPrinted = MyBase.Columns("Printed")
            Me.columnVerification = MyBase.Columns("Verification")
            Me.columnPrintDate = MyBase.Columns("PrintDate")
            Me.columnVerifKhmerName = MyBase.Columns("VerifKhmerName")
            Me.columnVerifLatinName = MyBase.Columns("VerifLatinName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndocumentno = New Global.System.Data.DataColumn("documentno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocumentno)
            Me.columnbarcodeno = New Global.System.Data.DataColumn("barcodeno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbarcodeno)
            Me.columnsurname_khmer = New Global.System.Data.DataColumn("surname_khmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsurname_khmer)
            Me.columngivenname_khmer = New Global.System.Data.DataColumn("givenname_khmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngivenname_khmer)
            Me.columnKhmerName = New Global.System.Data.DataColumn("KhmerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKhmerName)
            Me.columnsurname_latin = New Global.System.Data.DataColumn("surname_latin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsurname_latin)
            Me.columngivenname_latin = New Global.System.Data.DataColumn("givenname_latin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngivenname_latin)
            Me.columnLatinName = New Global.System.Data.DataColumn("LatinName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLatinName)
            Me.columnsex = New Global.System.Data.DataColumn("sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsex)
            Me.columndateofbirth = New Global.System.Data.DataColumn("dateofbirth", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateofbirth)
            Me.columndate_of_registration = New Global.System.Data.DataColumn("date_of_registration", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndate_of_registration)
            Me.columnpobvillage = New Global.System.Data.DataColumn("pobvillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobvillage)
            Me.columnpobcommune = New Global.System.Data.DataColumn("pobcommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobcommune)
            Me.columnpobdistrict = New Global.System.Data.DataColumn("pobdistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobdistrict)
            Me.columnpobprovince = New Global.System.Data.DataColumn("pobprovince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpobprovince)
            Me.columnOldDress = New Global.System.Data.DataColumn("OldDress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldDress)
            Me.columnpolvillage = New Global.System.Data.DataColumn("polvillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpolvillage)
            Me.columnpolcommune = New Global.System.Data.DataColumn("polcommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpolcommune)
            Me.columnpoldistrict = New Global.System.Data.DataColumn("poldistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpoldistrict)
            Me.columnpolprovince = New Global.System.Data.DataColumn("polprovince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpolprovince)
            Me.columnCurrentAddress = New Global.System.Data.DataColumn("CurrentAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentAddress)
            Me.columnreason = New Global.System.Data.DataColumn("reason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreason)
            Me.columnphoto = New Global.System.Data.DataColumn("photo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphoto)
            Me.columnother = New Global.System.Data.DataColumn("other", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnother)
            Me.columnregistrationform = New Global.System.Data.DataColumn("registrationform", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrationform)
            Me.columnVerBarcode = New Global.System.Data.DataColumn("VerBarcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerBarcode)
            Me.columnVerSurnameKhmer = New Global.System.Data.DataColumn("VerSurnameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerSurnameKhmer)
            Me.columnVerGiveNamekhmer = New Global.System.Data.DataColumn("VerGiveNamekhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerGiveNamekhmer)
            Me.columnVerSurnameLatin = New Global.System.Data.DataColumn("VerSurnameLatin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerSurnameLatin)
            Me.columnVerGiveNameLatin = New Global.System.Data.DataColumn("VerGiveNameLatin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerGiveNameLatin)
            Me.columnVerSex = New Global.System.Data.DataColumn("VerSex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerSex)
            Me.columnVerDateOfBirth = New Global.System.Data.DataColumn("VerDateOfBirth", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerDateOfBirth)
            Me.columnVerDateOfRegistration = New Global.System.Data.DataColumn("VerDateOfRegistration", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerDateOfRegistration)
            Me.columnVerPobVillage = New Global.System.Data.DataColumn("VerPobVillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPobVillage)
            Me.columnVerPobCommune = New Global.System.Data.DataColumn("VerPobCommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPobCommune)
            Me.columnVerDistrict = New Global.System.Data.DataColumn("VerDistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerDistrict)
            Me.columnVerPobProvince = New Global.System.Data.DataColumn("VerPobProvince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPobProvince)
            Me.columnVerPolVillage = New Global.System.Data.DataColumn("VerPolVillage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPolVillage)
            Me.columnVerPolCommune = New Global.System.Data.DataColumn("VerPolCommune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPolCommune)
            Me.columnVerPolDistrict = New Global.System.Data.DataColumn("VerPolDistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPolDistrict)
            Me.columnVerPolProvince = New Global.System.Data.DataColumn("VerPolProvince", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPolProvince)
            Me.columnVerReason = New Global.System.Data.DataColumn("VerReason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerReason)
            Me.columnVerPhoto = New Global.System.Data.DataColumn("VerPhoto", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerPhoto)
            Me.columnVerOther = New Global.System.Data.DataColumn("VerOther", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerOther)
            Me.columnVerRegistrationform = New Global.System.Data.DataColumn("VerRegistrationform", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerRegistrationform)
            Me.columnafisid = New Global.System.Data.DataColumn("afisid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnafisid)
            Me.columnPrinted = New Global.System.Data.DataColumn("Printed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinted)
            Me.columnVerification = New Global.System.Data.DataColumn("Verification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerification)
            Me.columnPrintDate = New Global.System.Data.DataColumn("PrintDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrintDate)
            Me.columnVerifKhmerName = New Global.System.Data.DataColumn("VerifKhmerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerifKhmerName)
            Me.columnVerifLatinName = New Global.System.Data.DataColumn("VerifLatinName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerifLatinName)
            Me.columndocumentno.AllowDBNull = false
            Me.columndocumentno.MaxLength = 50
            Me.columnbarcodeno.MaxLength = 50
            Me.columnsurname_khmer.MaxLength = 50
            Me.columngivenname_khmer.MaxLength = 50
            Me.columnKhmerName.ReadOnly = true
            Me.columnKhmerName.MaxLength = 101
            Me.columnsurname_latin.MaxLength = 50
            Me.columngivenname_latin.MaxLength = 50
            Me.columnLatinName.ReadOnly = true
            Me.columnLatinName.MaxLength = 101
            Me.columnsex.MaxLength = 10
            Me.columnpobvillage.MaxLength = 50
            Me.columnpobcommune.MaxLength = 50
            Me.columnpobdistrict.MaxLength = 50
            Me.columnpobprovince.MaxLength = 50
            Me.columnOldDress.ReadOnly = true
            Me.columnOldDress.MaxLength = 203
            Me.columnpolvillage.MaxLength = 50
            Me.columnpolcommune.MaxLength = 50
            Me.columnpoldistrict.MaxLength = 50
            Me.columnpolprovince.MaxLength = 50
            Me.columnCurrentAddress.ReadOnly = true
            Me.columnCurrentAddress.MaxLength = 203
            Me.columnreason.MaxLength = 50
            Me.columnother.MaxLength = 50
            Me.columnVerBarcode.MaxLength = 50
            Me.columnVerSurnameKhmer.MaxLength = 50
            Me.columnVerGiveNamekhmer.MaxLength = 50
            Me.columnVerSurnameLatin.MaxLength = 50
            Me.columnVerGiveNameLatin.MaxLength = 50
            Me.columnVerSex.MaxLength = 10
            Me.columnVerPobVillage.MaxLength = 50
            Me.columnVerPobCommune.MaxLength = 50
            Me.columnVerDistrict.MaxLength = 50
            Me.columnVerPobProvince.MaxLength = 50
            Me.columnVerPolVillage.MaxLength = 50
            Me.columnVerPolCommune.MaxLength = 50
            Me.columnVerPolDistrict.MaxLength = 50
            Me.columnVerPolProvince.MaxLength = 50
            Me.columnVerReason.MaxLength = 50
            Me.columnVerOther.MaxLength = 50
            Me.columnafisid.AllowDBNull = false
            Me.columnPrinted.MaxLength = 1
            Me.columnVerification.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTblFormVerifyRow() As TblFormVerifyRow
            Return CType(Me.NewRow,TblFormVerifyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TblFormVerifyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TblFormVerifyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TblFormVerifyRowChangedEvent) Is Nothing) Then
                RaiseEvent TblFormVerifyRowChanged(Me, New TblFormVerifyRowChangeEvent(CType(e.Row,TblFormVerifyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TblFormVerifyRowChangingEvent) Is Nothing) Then
                RaiseEvent TblFormVerifyRowChanging(Me, New TblFormVerifyRowChangeEvent(CType(e.Row,TblFormVerifyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TblFormVerifyRowDeletedEvent) Is Nothing) Then
                RaiseEvent TblFormVerifyRowDeleted(Me, New TblFormVerifyRowChangeEvent(CType(e.Row,TblFormVerifyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TblFormVerifyRowDeletingEvent) Is Nothing) Then
                RaiseEvent TblFormVerifyRowDeleting(Me, New TblFormVerifyRowChangeEvent(CType(e.Row,TblFormVerifyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTblFormVerifyRow(ByVal row As TblFormVerifyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TblFormVerifyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StatisticPeopleDataTable
        Inherits Global.System.Data.TypedTableBase(Of StatisticPeopleRow)
        
        Private columnAFISID As Global.System.Data.DataColumn
        
        Private columnBARCODENO As Global.System.Data.DataColumn
        
        Private columnDOCUMENTNO As Global.System.Data.DataColumn
        
        Private columnENROLLMENT_MB_SERIALNUMBER As Global.System.Data.DataColumn
        
        Private columnENROLLMENT_UID As Global.System.Data.DataColumn
        
        Private columnSURNAME_KHMER As Global.System.Data.DataColumn
        
        Private columnGIVENNAME_KHMER As Global.System.Data.DataColumn
        
        Private columnSURNAME_LATIN As Global.System.Data.DataColumn
        
        Private columnGIVENNAME_LATIN As Global.System.Data.DataColumn
        
        Private columnGENDER_TEXT As Global.System.Data.DataColumn
        
        Private columnDATEOFBIRTH As Global.System.Data.DataColumn
        
        Private columnDATE_OF_REGISTRATION As Global.System.Data.DataColumn
        
        Private columnRACE_TEXT As Global.System.Data.DataColumn
        
        Private columnPOB_VILLAGE_TEXT As Global.System.Data.DataColumn
        
        Private columnPOB_COMMUNECITYQUARTER_TEXT As Global.System.Data.DataColumn
        
        Private columnPOB_SECTIONCITYDISTRICT_TEXT As Global.System.Data.DataColumn
        
        Private columnPOB_CAPITALPROVINCE_TEXT As Global.System.Data.DataColumn
        
        Private columnADDRESS As Global.System.Data.DataColumn
        
        Private columnSTREET As Global.System.Data.DataColumn
        
        Private columnPOL_VILLAGE_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_COMMUNECITYQUARTER_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_SECTIONCITYDISTRICT_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_CAPITALPROVINCE_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_VILLAGE_CODE As Global.System.Data.DataColumn
        
        Private columnPOL_COMMUNECITYQUARTER_CODE As Global.System.Data.DataColumn
        
        Private columnPOL_SECTIONCITYDISTRICT_CODE As Global.System.Data.DataColumn
        
        Private columnPOL_CAPITALPROVINCE_CODE As Global.System.Data.DataColumn
        
        Private columnPROFESSION As Global.System.Data.DataColumn
        
        Private columnPLACEOFOCCUPATION As Global.System.Data.DataColumn
        
        Private columnHEIGHT As Global.System.Data.DataColumn
        
        Private columnSPECIALSCAR As Global.System.Data.DataColumn
        
        Private columnISSUEDATE As Global.System.Data.DataColumn
        
        Private columnEXPIRYDATE As Global.System.Data.DataColumn
        
        Private columnNOTEBOOKEXPDT_OLD As Global.System.Data.DataColumn
        
        Private columnSENTTOPRINTER As Global.System.Data.DataColumn
        
        Private columnSTATUS As Global.System.Data.DataColumn
        
        Private columnNATIONALITY_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_COMMUNECITYQUARTER_TEXT_1 As Global.System.Data.DataColumn
        
        Private columnPOL_SECTIONCITYDISTRICT_TYPE As Global.System.Data.DataColumn
        
        Private columnRELIGION_TEXT As Global.System.Data.DataColumn
        
        Private columnPERSONID As Global.System.Data.DataColumn
        
        Private columnHQRECEIVEDDT As Global.System.Data.DataColumn
        
        Private columnAPPLICATIONTYPE As Global.System.Data.DataColumn
        
        Private columnCalAge As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StatisticPeople"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AFISIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAFISID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BARCODENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBARCODENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCUMENTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENROLLMENT_MB_SERIALNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENROLLMENT_MB_SERIALNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENROLLMENT_UIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENROLLMENT_UID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SURNAME_KHMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSURNAME_KHMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GIVENNAME_KHMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGIVENNAME_KHMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SURNAME_LATINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSURNAME_LATIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GIVENNAME_LATINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGIVENNAME_LATIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GENDER_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENDER_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEOFBIRTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEOFBIRTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATE_OF_REGISTRATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_OF_REGISTRATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RACE_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRACE_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POB_VILLAGE_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOB_VILLAGE_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POB_COMMUNECITYQUARTER_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOB_COMMUNECITYQUARTER_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POB_SECTIONCITYDISTRICT_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOB_SECTIONCITYDISTRICT_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POB_CAPITALPROVINCE_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOB_CAPITALPROVINCE_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STREETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTREET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_VILLAGE_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_VILLAGE_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_COMMUNECITYQUARTER_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_COMMUNECITYQUARTER_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_SECTIONCITYDISTRICT_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_SECTIONCITYDISTRICT_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_CAPITALPROVINCE_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_CAPITALPROVINCE_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_VILLAGE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_VILLAGE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_COMMUNECITYQUARTER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_COMMUNECITYQUARTER_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_SECTIONCITYDISTRICT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_SECTIONCITYDISTRICT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_CAPITALPROVINCE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_CAPITALPROVINCE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFESSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFESSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLACEOFOCCUPATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLACEOFOCCUPATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPECIALSCARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIALSCAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISSUEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISSUEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPIRYDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPIRYDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTEBOOKEXPDT_OLDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTEBOOKEXPDT_OLD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SENTTOPRINTERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSENTTOPRINTER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NATIONALITY_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNATIONALITY_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_COMMUNECITYQUARTER_TEXT_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_COMMUNECITYQUARTER_TEXT_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_SECTIONCITYDISTRICT_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_SECTIONCITYDISTRICT_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RELIGION_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRELIGION_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERSONIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERSONID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HQRECEIVEDDTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHQRECEIVEDDT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APPLICATIONTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPPLICATIONTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StatisticPeopleRow
            Get
                Return CType(Me.Rows(index),StatisticPeopleRow)
            End Get
        End Property
        
        Public Event StatisticPeopleRowChanging As StatisticPeopleRowChangeEventHandler
        
        Public Event StatisticPeopleRowChanged As StatisticPeopleRowChangeEventHandler
        
        Public Event StatisticPeopleRowDeleting As StatisticPeopleRowChangeEventHandler
        
        Public Event StatisticPeopleRowDeleted As StatisticPeopleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStatisticPeopleRow(ByVal row As StatisticPeopleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStatisticPeopleRow( _
                    ByVal AFISID As String,  _
                    ByVal BARCODENO As String,  _
                    ByVal DOCUMENTNO As String,  _
                    ByVal ENROLLMENT_MB_SERIALNUMBER As String,  _
                    ByVal ENROLLMENT_UID As String,  _
                    ByVal SURNAME_KHMER As String,  _
                    ByVal GIVENNAME_KHMER As String,  _
                    ByVal SURNAME_LATIN As String,  _
                    ByVal GIVENNAME_LATIN As String,  _
                    ByVal GENDER_TEXT As String,  _
                    ByVal DATEOFBIRTH As Date,  _
                    ByVal DATE_OF_REGISTRATION As String,  _
                    ByVal RACE_TEXT As String,  _
                    ByVal POB_VILLAGE_TEXT As String,  _
                    ByVal POB_COMMUNECITYQUARTER_TEXT As String,  _
                    ByVal POB_SECTIONCITYDISTRICT_TEXT As String,  _
                    ByVal POB_CAPITALPROVINCE_TEXT As String,  _
                    ByVal ADDRESS As String,  _
                    ByVal STREET As String,  _
                    ByVal POL_VILLAGE_TEXT As String,  _
                    ByVal POL_COMMUNECITYQUARTER_TEXT As String,  _
                    ByVal POL_SECTIONCITYDISTRICT_TEXT As String,  _
                    ByVal POL_CAPITALPROVINCE_TEXT As String,  _
                    ByVal POL_VILLAGE_CODE As Long,  _
                    ByVal POL_COMMUNECITYQUARTER_CODE As Long,  _
                    ByVal POL_SECTIONCITYDISTRICT_CODE As Long,  _
                    ByVal POL_CAPITALPROVINCE_CODE As Long,  _
                    ByVal PROFESSION As String,  _
                    ByVal PLACEOFOCCUPATION As String,  _
                    ByVal HEIGHT As String,  _
                    ByVal SPECIALSCAR As String,  _
                    ByVal ISSUEDATE As String,  _
                    ByVal EXPIRYDATE As String,  _
                    ByVal NOTEBOOKEXPDT_OLD As String,  _
                    ByVal SENTTOPRINTER As String,  _
                    ByVal STATUS As String,  _
                    ByVal NATIONALITY_TEXT As String,  _
                    ByVal POL_COMMUNECITYQUARTER_TEXT_1 As String,  _
                    ByVal POL_SECTIONCITYDISTRICT_TYPE As String,  _
                    ByVal RELIGION_TEXT As String,  _
                    ByVal PERSONID As String,  _
                    ByVal HQRECEIVEDDT As String,  _
                    ByVal APPLICATIONTYPE As String,  _
                    ByVal CalAge As Decimal) As StatisticPeopleRow
            Dim rowStatisticPeopleRow As StatisticPeopleRow = CType(Me.NewRow,StatisticPeopleRow)
            Dim columnValuesArray() As Object = New Object() {AFISID, BARCODENO, DOCUMENTNO, ENROLLMENT_MB_SERIALNUMBER, ENROLLMENT_UID, SURNAME_KHMER, GIVENNAME_KHMER, SURNAME_LATIN, GIVENNAME_LATIN, GENDER_TEXT, DATEOFBIRTH, DATE_OF_REGISTRATION, RACE_TEXT, POB_VILLAGE_TEXT, POB_COMMUNECITYQUARTER_TEXT, POB_SECTIONCITYDISTRICT_TEXT, POB_CAPITALPROVINCE_TEXT, ADDRESS, STREET, POL_VILLAGE_TEXT, POL_COMMUNECITYQUARTER_TEXT, POL_SECTIONCITYDISTRICT_TEXT, POL_CAPITALPROVINCE_TEXT, POL_VILLAGE_CODE, POL_COMMUNECITYQUARTER_CODE, POL_SECTIONCITYDISTRICT_CODE, POL_CAPITALPROVINCE_CODE, PROFESSION, PLACEOFOCCUPATION, HEIGHT, SPECIALSCAR, ISSUEDATE, EXPIRYDATE, NOTEBOOKEXPDT_OLD, SENTTOPRINTER, STATUS, NATIONALITY_TEXT, POL_COMMUNECITYQUARTER_TEXT_1, POL_SECTIONCITYDISTRICT_TYPE, RELIGION_TEXT, PERSONID, HQRECEIVEDDT, APPLICATIONTYPE, CalAge}
            rowStatisticPeopleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStatisticPeopleRow)
            Return rowStatisticPeopleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StatisticPeopleDataTable = CType(MyBase.Clone,StatisticPeopleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StatisticPeopleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAFISID = MyBase.Columns("AFISID")
            Me.columnBARCODENO = MyBase.Columns("BARCODENO")
            Me.columnDOCUMENTNO = MyBase.Columns("DOCUMENTNO")
            Me.columnENROLLMENT_MB_SERIALNUMBER = MyBase.Columns("ENROLLMENT_MB_SERIALNUMBER")
            Me.columnENROLLMENT_UID = MyBase.Columns("ENROLLMENT_UID")
            Me.columnSURNAME_KHMER = MyBase.Columns("SURNAME_KHMER")
            Me.columnGIVENNAME_KHMER = MyBase.Columns("GIVENNAME_KHMER")
            Me.columnSURNAME_LATIN = MyBase.Columns("SURNAME_LATIN")
            Me.columnGIVENNAME_LATIN = MyBase.Columns("GIVENNAME_LATIN")
            Me.columnGENDER_TEXT = MyBase.Columns("GENDER_TEXT")
            Me.columnDATEOFBIRTH = MyBase.Columns("DATEOFBIRTH")
            Me.columnDATE_OF_REGISTRATION = MyBase.Columns("DATE_OF_REGISTRATION")
            Me.columnRACE_TEXT = MyBase.Columns("RACE_TEXT")
            Me.columnPOB_VILLAGE_TEXT = MyBase.Columns("POB_VILLAGE_TEXT")
            Me.columnPOB_COMMUNECITYQUARTER_TEXT = MyBase.Columns("POB_COMMUNECITYQUARTER_TEXT")
            Me.columnPOB_SECTIONCITYDISTRICT_TEXT = MyBase.Columns("POB_SECTIONCITYDISTRICT_TEXT")
            Me.columnPOB_CAPITALPROVINCE_TEXT = MyBase.Columns("POB_CAPITALPROVINCE_TEXT")
            Me.columnADDRESS = MyBase.Columns("ADDRESS")
            Me.columnSTREET = MyBase.Columns("STREET")
            Me.columnPOL_VILLAGE_TEXT = MyBase.Columns("POL_VILLAGE_TEXT")
            Me.columnPOL_COMMUNECITYQUARTER_TEXT = MyBase.Columns("POL_COMMUNECITYQUARTER_TEXT")
            Me.columnPOL_SECTIONCITYDISTRICT_TEXT = MyBase.Columns("POL_SECTIONCITYDISTRICT_TEXT")
            Me.columnPOL_CAPITALPROVINCE_TEXT = MyBase.Columns("POL_CAPITALPROVINCE_TEXT")
            Me.columnPOL_VILLAGE_CODE = MyBase.Columns("POL_VILLAGE_CODE")
            Me.columnPOL_COMMUNECITYQUARTER_CODE = MyBase.Columns("POL_COMMUNECITYQUARTER_CODE")
            Me.columnPOL_SECTIONCITYDISTRICT_CODE = MyBase.Columns("POL_SECTIONCITYDISTRICT_CODE")
            Me.columnPOL_CAPITALPROVINCE_CODE = MyBase.Columns("POL_CAPITALPROVINCE_CODE")
            Me.columnPROFESSION = MyBase.Columns("PROFESSION")
            Me.columnPLACEOFOCCUPATION = MyBase.Columns("PLACEOFOCCUPATION")
            Me.columnHEIGHT = MyBase.Columns("HEIGHT")
            Me.columnSPECIALSCAR = MyBase.Columns("SPECIALSCAR")
            Me.columnISSUEDATE = MyBase.Columns("ISSUEDATE")
            Me.columnEXPIRYDATE = MyBase.Columns("EXPIRYDATE")
            Me.columnNOTEBOOKEXPDT_OLD = MyBase.Columns("NOTEBOOKEXPDT_OLD")
            Me.columnSENTTOPRINTER = MyBase.Columns("SENTTOPRINTER")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnNATIONALITY_TEXT = MyBase.Columns("NATIONALITY_TEXT")
            Me.columnPOL_COMMUNECITYQUARTER_TEXT_1 = MyBase.Columns("POL_COMMUNECITYQUARTER_TEXT_1")
            Me.columnPOL_SECTIONCITYDISTRICT_TYPE = MyBase.Columns("POL_SECTIONCITYDISTRICT_TYPE")
            Me.columnRELIGION_TEXT = MyBase.Columns("RELIGION_TEXT")
            Me.columnPERSONID = MyBase.Columns("PERSONID")
            Me.columnHQRECEIVEDDT = MyBase.Columns("HQRECEIVEDDT")
            Me.columnAPPLICATIONTYPE = MyBase.Columns("APPLICATIONTYPE")
            Me.columnCalAge = MyBase.Columns("CalAge")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAFISID = New Global.System.Data.DataColumn("AFISID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAFISID)
            Me.columnBARCODENO = New Global.System.Data.DataColumn("BARCODENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBARCODENO)
            Me.columnDOCUMENTNO = New Global.System.Data.DataColumn("DOCUMENTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTNO)
            Me.columnENROLLMENT_MB_SERIALNUMBER = New Global.System.Data.DataColumn("ENROLLMENT_MB_SERIALNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENROLLMENT_MB_SERIALNUMBER)
            Me.columnENROLLMENT_UID = New Global.System.Data.DataColumn("ENROLLMENT_UID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENROLLMENT_UID)
            Me.columnSURNAME_KHMER = New Global.System.Data.DataColumn("SURNAME_KHMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSURNAME_KHMER)
            Me.columnGIVENNAME_KHMER = New Global.System.Data.DataColumn("GIVENNAME_KHMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGIVENNAME_KHMER)
            Me.columnSURNAME_LATIN = New Global.System.Data.DataColumn("SURNAME_LATIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSURNAME_LATIN)
            Me.columnGIVENNAME_LATIN = New Global.System.Data.DataColumn("GIVENNAME_LATIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGIVENNAME_LATIN)
            Me.columnGENDER_TEXT = New Global.System.Data.DataColumn("GENDER_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENDER_TEXT)
            Me.columnDATEOFBIRTH = New Global.System.Data.DataColumn("DATEOFBIRTH", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEOFBIRTH)
            Me.columnDATE_OF_REGISTRATION = New Global.System.Data.DataColumn("DATE_OF_REGISTRATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_OF_REGISTRATION)
            Me.columnRACE_TEXT = New Global.System.Data.DataColumn("RACE_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRACE_TEXT)
            Me.columnPOB_VILLAGE_TEXT = New Global.System.Data.DataColumn("POB_VILLAGE_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOB_VILLAGE_TEXT)
            Me.columnPOB_COMMUNECITYQUARTER_TEXT = New Global.System.Data.DataColumn("POB_COMMUNECITYQUARTER_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOB_COMMUNECITYQUARTER_TEXT)
            Me.columnPOB_SECTIONCITYDISTRICT_TEXT = New Global.System.Data.DataColumn("POB_SECTIONCITYDISTRICT_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOB_SECTIONCITYDISTRICT_TEXT)
            Me.columnPOB_CAPITALPROVINCE_TEXT = New Global.System.Data.DataColumn("POB_CAPITALPROVINCE_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOB_CAPITALPROVINCE_TEXT)
            Me.columnADDRESS = New Global.System.Data.DataColumn("ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS)
            Me.columnSTREET = New Global.System.Data.DataColumn("STREET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTREET)
            Me.columnPOL_VILLAGE_TEXT = New Global.System.Data.DataColumn("POL_VILLAGE_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_VILLAGE_TEXT)
            Me.columnPOL_COMMUNECITYQUARTER_TEXT = New Global.System.Data.DataColumn("POL_COMMUNECITYQUARTER_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_COMMUNECITYQUARTER_TEXT)
            Me.columnPOL_SECTIONCITYDISTRICT_TEXT = New Global.System.Data.DataColumn("POL_SECTIONCITYDISTRICT_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_SECTIONCITYDISTRICT_TEXT)
            Me.columnPOL_CAPITALPROVINCE_TEXT = New Global.System.Data.DataColumn("POL_CAPITALPROVINCE_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_CAPITALPROVINCE_TEXT)
            Me.columnPOL_VILLAGE_CODE = New Global.System.Data.DataColumn("POL_VILLAGE_CODE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_VILLAGE_CODE)
            Me.columnPOL_COMMUNECITYQUARTER_CODE = New Global.System.Data.DataColumn("POL_COMMUNECITYQUARTER_CODE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_COMMUNECITYQUARTER_CODE)
            Me.columnPOL_SECTIONCITYDISTRICT_CODE = New Global.System.Data.DataColumn("POL_SECTIONCITYDISTRICT_CODE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_SECTIONCITYDISTRICT_CODE)
            Me.columnPOL_CAPITALPROVINCE_CODE = New Global.System.Data.DataColumn("POL_CAPITALPROVINCE_CODE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_CAPITALPROVINCE_CODE)
            Me.columnPROFESSION = New Global.System.Data.DataColumn("PROFESSION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFESSION)
            Me.columnPLACEOFOCCUPATION = New Global.System.Data.DataColumn("PLACEOFOCCUPATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLACEOFOCCUPATION)
            Me.columnHEIGHT = New Global.System.Data.DataColumn("HEIGHT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEIGHT)
            Me.columnSPECIALSCAR = New Global.System.Data.DataColumn("SPECIALSCAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIALSCAR)
            Me.columnISSUEDATE = New Global.System.Data.DataColumn("ISSUEDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISSUEDATE)
            Me.columnEXPIRYDATE = New Global.System.Data.DataColumn("EXPIRYDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPIRYDATE)
            Me.columnNOTEBOOKEXPDT_OLD = New Global.System.Data.DataColumn("NOTEBOOKEXPDT_OLD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTEBOOKEXPDT_OLD)
            Me.columnSENTTOPRINTER = New Global.System.Data.DataColumn("SENTTOPRINTER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSENTTOPRINTER)
            Me.columnSTATUS = New Global.System.Data.DataColumn("STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnNATIONALITY_TEXT = New Global.System.Data.DataColumn("NATIONALITY_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNATIONALITY_TEXT)
            Me.columnPOL_COMMUNECITYQUARTER_TEXT_1 = New Global.System.Data.DataColumn("POL_COMMUNECITYQUARTER_TEXT_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_COMMUNECITYQUARTER_TEXT_1)
            Me.columnPOL_SECTIONCITYDISTRICT_TYPE = New Global.System.Data.DataColumn("POL_SECTIONCITYDISTRICT_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_SECTIONCITYDISTRICT_TYPE)
            Me.columnRELIGION_TEXT = New Global.System.Data.DataColumn("RELIGION_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRELIGION_TEXT)
            Me.columnPERSONID = New Global.System.Data.DataColumn("PERSONID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERSONID)
            Me.columnHQRECEIVEDDT = New Global.System.Data.DataColumn("HQRECEIVEDDT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHQRECEIVEDDT)
            Me.columnAPPLICATIONTYPE = New Global.System.Data.DataColumn("APPLICATIONTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPPLICATIONTYPE)
            Me.columnCalAge = New Global.System.Data.DataColumn("CalAge", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalAge)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStatisticPeopleRow() As StatisticPeopleRow
            Return CType(Me.NewRow,StatisticPeopleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StatisticPeopleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StatisticPeopleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StatisticPeopleRowChangedEvent) Is Nothing) Then
                RaiseEvent StatisticPeopleRowChanged(Me, New StatisticPeopleRowChangeEvent(CType(e.Row,StatisticPeopleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StatisticPeopleRowChangingEvent) Is Nothing) Then
                RaiseEvent StatisticPeopleRowChanging(Me, New StatisticPeopleRowChangeEvent(CType(e.Row,StatisticPeopleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StatisticPeopleRowDeletedEvent) Is Nothing) Then
                RaiseEvent StatisticPeopleRowDeleted(Me, New StatisticPeopleRowChangeEvent(CType(e.Row,StatisticPeopleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StatisticPeopleRowDeletingEvent) Is Nothing) Then
                RaiseEvent StatisticPeopleRowDeleting(Me, New StatisticPeopleRowChangeEvent(CType(e.Row,StatisticPeopleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStatisticPeopleRow(ByVal row As StatisticPeopleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StatisticPeopleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SelectAllProvinceDataTable
        Inherits Global.System.Data.TypedTableBase(Of SelectAllProvinceRow)
        
        Private columnCountSex As Global.System.Data.DataColumn
        
        Private columnGENDER_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_CAPITALPROVINCE_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_CAPITALPROVINCE_CODE As Global.System.Data.DataColumn
        
        Private columnCalAge As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SelectAllProvince"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountSexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GENDER_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENDER_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_CAPITALPROVINCE_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_CAPITALPROVINCE_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_CAPITALPROVINCE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_CAPITALPROVINCE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SelectAllProvinceRow
            Get
                Return CType(Me.Rows(index),SelectAllProvinceRow)
            End Get
        End Property
        
        Public Event SelectAllProvinceRowChanging As SelectAllProvinceRowChangeEventHandler
        
        Public Event SelectAllProvinceRowChanged As SelectAllProvinceRowChangeEventHandler
        
        Public Event SelectAllProvinceRowDeleting As SelectAllProvinceRowChangeEventHandler
        
        Public Event SelectAllProvinceRowDeleted As SelectAllProvinceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSelectAllProvinceRow(ByVal row As SelectAllProvinceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSelectAllProvinceRow(ByVal CountSex As Decimal, ByVal GENDER_TEXT As String, ByVal POL_CAPITALPROVINCE_TEXT As String, ByVal POL_CAPITALPROVINCE_CODE As Decimal, ByVal CalAge As Decimal) As SelectAllProvinceRow
            Dim rowSelectAllProvinceRow As SelectAllProvinceRow = CType(Me.NewRow,SelectAllProvinceRow)
            Dim columnValuesArray() As Object = New Object() {CountSex, GENDER_TEXT, POL_CAPITALPROVINCE_TEXT, POL_CAPITALPROVINCE_CODE, CalAge}
            rowSelectAllProvinceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSelectAllProvinceRow)
            Return rowSelectAllProvinceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SelectAllProvinceDataTable = CType(MyBase.Clone,SelectAllProvinceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SelectAllProvinceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCountSex = MyBase.Columns("CountSex")
            Me.columnGENDER_TEXT = MyBase.Columns("GENDER_TEXT")
            Me.columnPOL_CAPITALPROVINCE_TEXT = MyBase.Columns("POL_CAPITALPROVINCE_TEXT")
            Me.columnPOL_CAPITALPROVINCE_CODE = MyBase.Columns("POL_CAPITALPROVINCE_CODE")
            Me.columnCalAge = MyBase.Columns("CalAge")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCountSex = New Global.System.Data.DataColumn("CountSex", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountSex)
            Me.columnGENDER_TEXT = New Global.System.Data.DataColumn("GENDER_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENDER_TEXT)
            Me.columnPOL_CAPITALPROVINCE_TEXT = New Global.System.Data.DataColumn("POL_CAPITALPROVINCE_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_CAPITALPROVINCE_TEXT)
            Me.columnPOL_CAPITALPROVINCE_CODE = New Global.System.Data.DataColumn("POL_CAPITALPROVINCE_CODE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_CAPITALPROVINCE_CODE)
            Me.columnCalAge = New Global.System.Data.DataColumn("CalAge", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalAge)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSelectAllProvinceRow() As SelectAllProvinceRow
            Return CType(Me.NewRow,SelectAllProvinceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SelectAllProvinceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SelectAllProvinceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SelectAllProvinceRowChangedEvent) Is Nothing) Then
                RaiseEvent SelectAllProvinceRowChanged(Me, New SelectAllProvinceRowChangeEvent(CType(e.Row,SelectAllProvinceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SelectAllProvinceRowChangingEvent) Is Nothing) Then
                RaiseEvent SelectAllProvinceRowChanging(Me, New SelectAllProvinceRowChangeEvent(CType(e.Row,SelectAllProvinceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SelectAllProvinceRowDeletedEvent) Is Nothing) Then
                RaiseEvent SelectAllProvinceRowDeleted(Me, New SelectAllProvinceRowChangeEvent(CType(e.Row,SelectAllProvinceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SelectAllProvinceRowDeletingEvent) Is Nothing) Then
                RaiseEvent SelectAllProvinceRowDeleting(Me, New SelectAllProvinceRowChangeEvent(CType(e.Row,SelectAllProvinceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSelectAllProvinceRow(ByVal row As SelectAllProvinceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SelectAllProvinceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ResultKJBDataTable
        Inherits Global.System.Data.TypedTableBase(Of ResultKJBRow)
        
        Private columnAFISID As Global.System.Data.DataColumn
        
        Private columnDOCUMENTNO As Global.System.Data.DataColumn
        
        Private columnSURNAME_KHMER As Global.System.Data.DataColumn
        
        Private columnGIVENNAME_KHMER As Global.System.Data.DataColumn
        
        Private columnGENDER_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_CAPITALPROVINCE_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_SECTIONCITYDISTRICT_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_COMMUNECITYQUARTER_TEXT As Global.System.Data.DataColumn
        
        Private columnDATEOFBIRTH As Global.System.Data.DataColumn
        
        Private columnROW_POSITION As Global.System.Data.DataColumn
        
        Private columnRegistrationId As Global.System.Data.DataColumn
        
        Private columnIDNumber As Global.System.Data.DataColumn
        
        Private columnFamilyName As Global.System.Data.DataColumn
        
        Private columnGivenName As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnDateOfBirthKJB As Global.System.Data.DataColumn
        
        Private columnProvinceCode As Global.System.Data.DataColumn
        
        Private columnProvinceKh As Global.System.Data.DataColumn
        
        Private columnCommuneCode As Global.System.Data.DataColumn
        
        Private columnCommuneKh As Global.System.Data.DataColumn
        
        Private columnDATE_SCAN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ResultKJB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AFISIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAFISID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCUMENTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SURNAME_KHMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSURNAME_KHMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GIVENNAME_KHMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGIVENNAME_KHMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GENDER_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENDER_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_CAPITALPROVINCE_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_CAPITALPROVINCE_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_SECTIONCITYDISTRICT_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_SECTIONCITYDISTRICT_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_COMMUNECITYQUARTER_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_COMMUNECITYQUARTER_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEOFBIRTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEOFBIRTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROW_POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROW_POSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrationIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrationId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FamilyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamilyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GivenNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGivenName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateOfBirthKJBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateOfBirthKJB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvinceCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceKhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvinceKh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommuneCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommuneCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommuneKhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommuneKh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATE_SCANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_SCAN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ResultKJBRow
            Get
                Return CType(Me.Rows(index),ResultKJBRow)
            End Get
        End Property
        
        Public Event ResultKJBRowChanging As ResultKJBRowChangeEventHandler
        
        Public Event ResultKJBRowChanged As ResultKJBRowChangeEventHandler
        
        Public Event ResultKJBRowDeleting As ResultKJBRowChangeEventHandler
        
        Public Event ResultKJBRowDeleted As ResultKJBRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddResultKJBRow(ByVal row As ResultKJBRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddResultKJBRow( _
                    ByVal AFISID As Decimal,  _
                    ByVal DOCUMENTNO As String,  _
                    ByVal SURNAME_KHMER As String,  _
                    ByVal GIVENNAME_KHMER As String,  _
                    ByVal GENDER_TEXT As String,  _
                    ByVal POL_CAPITALPROVINCE_TEXT As String,  _
                    ByVal POL_SECTIONCITYDISTRICT_TEXT As String,  _
                    ByVal POL_COMMUNECITYQUARTER_TEXT As String,  _
                    ByVal DATEOFBIRTH As Date,  _
                    ByVal ROW_POSITION As Decimal,  _
                    ByVal RegistrationId As Decimal,  _
                    ByVal IDNumber As String,  _
                    ByVal FamilyName As String,  _
                    ByVal GivenName As String,  _
                    ByVal Gender As Decimal,  _
                    ByVal DateOfBirthKJB As Date,  _
                    ByVal ProvinceCode As Decimal,  _
                    ByVal ProvinceKh As String,  _
                    ByVal CommuneCode As Decimal,  _
                    ByVal CommuneKh As String,  _
                    ByVal DATE_SCAN As Date) As ResultKJBRow
            Dim rowResultKJBRow As ResultKJBRow = CType(Me.NewRow,ResultKJBRow)
            Dim columnValuesArray() As Object = New Object() {AFISID, DOCUMENTNO, SURNAME_KHMER, GIVENNAME_KHMER, GENDER_TEXT, POL_CAPITALPROVINCE_TEXT, POL_SECTIONCITYDISTRICT_TEXT, POL_COMMUNECITYQUARTER_TEXT, DATEOFBIRTH, ROW_POSITION, RegistrationId, IDNumber, FamilyName, GivenName, Gender, DateOfBirthKJB, ProvinceCode, ProvinceKh, CommuneCode, CommuneKh, DATE_SCAN}
            rowResultKJBRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowResultKJBRow)
            Return rowResultKJBRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ResultKJBDataTable = CType(MyBase.Clone,ResultKJBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ResultKJBDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAFISID = MyBase.Columns("AFISID")
            Me.columnDOCUMENTNO = MyBase.Columns("DOCUMENTNO")
            Me.columnSURNAME_KHMER = MyBase.Columns("SURNAME_KHMER")
            Me.columnGIVENNAME_KHMER = MyBase.Columns("GIVENNAME_KHMER")
            Me.columnGENDER_TEXT = MyBase.Columns("GENDER_TEXT")
            Me.columnPOL_CAPITALPROVINCE_TEXT = MyBase.Columns("POL_CAPITALPROVINCE_TEXT")
            Me.columnPOL_SECTIONCITYDISTRICT_TEXT = MyBase.Columns("POL_SECTIONCITYDISTRICT_TEXT")
            Me.columnPOL_COMMUNECITYQUARTER_TEXT = MyBase.Columns("POL_COMMUNECITYQUARTER_TEXT")
            Me.columnDATEOFBIRTH = MyBase.Columns("DATEOFBIRTH")
            Me.columnROW_POSITION = MyBase.Columns("ROW_POSITION")
            Me.columnRegistrationId = MyBase.Columns("RegistrationId")
            Me.columnIDNumber = MyBase.Columns("IDNumber")
            Me.columnFamilyName = MyBase.Columns("FamilyName")
            Me.columnGivenName = MyBase.Columns("GivenName")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnDateOfBirthKJB = MyBase.Columns("DateOfBirthKJB")
            Me.columnProvinceCode = MyBase.Columns("ProvinceCode")
            Me.columnProvinceKh = MyBase.Columns("ProvinceKh")
            Me.columnCommuneCode = MyBase.Columns("CommuneCode")
            Me.columnCommuneKh = MyBase.Columns("CommuneKh")
            Me.columnDATE_SCAN = MyBase.Columns("DATE_SCAN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAFISID = New Global.System.Data.DataColumn("AFISID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAFISID)
            Me.columnDOCUMENTNO = New Global.System.Data.DataColumn("DOCUMENTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTNO)
            Me.columnSURNAME_KHMER = New Global.System.Data.DataColumn("SURNAME_KHMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSURNAME_KHMER)
            Me.columnGIVENNAME_KHMER = New Global.System.Data.DataColumn("GIVENNAME_KHMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGIVENNAME_KHMER)
            Me.columnGENDER_TEXT = New Global.System.Data.DataColumn("GENDER_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENDER_TEXT)
            Me.columnPOL_CAPITALPROVINCE_TEXT = New Global.System.Data.DataColumn("POL_CAPITALPROVINCE_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_CAPITALPROVINCE_TEXT)
            Me.columnPOL_SECTIONCITYDISTRICT_TEXT = New Global.System.Data.DataColumn("POL_SECTIONCITYDISTRICT_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_SECTIONCITYDISTRICT_TEXT)
            Me.columnPOL_COMMUNECITYQUARTER_TEXT = New Global.System.Data.DataColumn("POL_COMMUNECITYQUARTER_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_COMMUNECITYQUARTER_TEXT)
            Me.columnDATEOFBIRTH = New Global.System.Data.DataColumn("DATEOFBIRTH", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEOFBIRTH)
            Me.columnROW_POSITION = New Global.System.Data.DataColumn("ROW_POSITION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROW_POSITION)
            Me.columnRegistrationId = New Global.System.Data.DataColumn("RegistrationId", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrationId)
            Me.columnIDNumber = New Global.System.Data.DataColumn("IDNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDNumber)
            Me.columnFamilyName = New Global.System.Data.DataColumn("FamilyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamilyName)
            Me.columnGivenName = New Global.System.Data.DataColumn("GivenName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGivenName)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnDateOfBirthKJB = New Global.System.Data.DataColumn("DateOfBirthKJB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateOfBirthKJB)
            Me.columnProvinceCode = New Global.System.Data.DataColumn("ProvinceCode", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvinceCode)
            Me.columnProvinceKh = New Global.System.Data.DataColumn("ProvinceKh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvinceKh)
            Me.columnCommuneCode = New Global.System.Data.DataColumn("CommuneCode", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommuneCode)
            Me.columnCommuneKh = New Global.System.Data.DataColumn("CommuneKh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommuneKh)
            Me.columnDATE_SCAN = New Global.System.Data.DataColumn("DATE_SCAN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_SCAN)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewResultKJBRow() As ResultKJBRow
            Return CType(Me.NewRow,ResultKJBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ResultKJBRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ResultKJBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ResultKJBRowChangedEvent) Is Nothing) Then
                RaiseEvent ResultKJBRowChanged(Me, New ResultKJBRowChangeEvent(CType(e.Row,ResultKJBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ResultKJBRowChangingEvent) Is Nothing) Then
                RaiseEvent ResultKJBRowChanging(Me, New ResultKJBRowChangeEvent(CType(e.Row,ResultKJBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ResultKJBRowDeletedEvent) Is Nothing) Then
                RaiseEvent ResultKJBRowDeleted(Me, New ResultKJBRowChangeEvent(CType(e.Row,ResultKJBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ResultKJBRowDeletingEvent) Is Nothing) Then
                RaiseEvent ResultKJBRowDeleting(Me, New ResultKJBRowChangeEvent(CType(e.Row,ResultKJBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveResultKJBRow(ByVal row As ResultKJBRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ResultKJBDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MOI_TEM_RESULTDataTable
        Inherits Global.System.Data.TypedTableBase(Of MOI_TEM_RESULTRow)
        
        Private columnAFISID As Global.System.Data.DataColumn
        
        Private columnDOCUMENTNO As Global.System.Data.DataColumn
        
        Private columnSURNAME_KHMER As Global.System.Data.DataColumn
        
        Private columnGIVENNAME_KHMER As Global.System.Data.DataColumn
        
        Private columnGENDER_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_CAPITALPROVINCE_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_SECTIONCITYDISTRICT_TEXT As Global.System.Data.DataColumn
        
        Private columnPOL_COMMUNECITYQUARTER_TEXT As Global.System.Data.DataColumn
        
        Private columnDATEOFBIRTH As Global.System.Data.DataColumn
        
        Private columnROW_POSITION As Global.System.Data.DataColumn
        
        Private columnRegistrationId As Global.System.Data.DataColumn
        
        Private columnIDNumber As Global.System.Data.DataColumn
        
        Private columnFamilyName As Global.System.Data.DataColumn
        
        Private columnGivenName As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnDateOfBirthKJB As Global.System.Data.DataColumn
        
        Private columnProvinceCode As Global.System.Data.DataColumn
        
        Private columnProvinceKh As Global.System.Data.DataColumn
        
        Private columnCommuneCode As Global.System.Data.DataColumn
        
        Private columnCommuneKh As Global.System.Data.DataColumn
        
        Private columnDATE_SCAN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MOI_TEM_RESULT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AFISIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAFISID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCUMENTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SURNAME_KHMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSURNAME_KHMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GIVENNAME_KHMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGIVENNAME_KHMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GENDER_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENDER_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_CAPITALPROVINCE_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_CAPITALPROVINCE_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_SECTIONCITYDISTRICT_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_SECTIONCITYDISTRICT_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POL_COMMUNECITYQUARTER_TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL_COMMUNECITYQUARTER_TEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEOFBIRTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEOFBIRTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROW_POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROW_POSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrationIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrationId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FamilyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamilyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GivenNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGivenName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateOfBirthKJBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateOfBirthKJB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvinceCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceKhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvinceKh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommuneCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommuneCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommuneKhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommuneKh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATE_SCANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_SCAN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MOI_TEM_RESULTRow
            Get
                Return CType(Me.Rows(index),MOI_TEM_RESULTRow)
            End Get
        End Property
        
        Public Event MOI_TEM_RESULTRowChanging As MOI_TEM_RESULTRowChangeEventHandler
        
        Public Event MOI_TEM_RESULTRowChanged As MOI_TEM_RESULTRowChangeEventHandler
        
        Public Event MOI_TEM_RESULTRowDeleting As MOI_TEM_RESULTRowChangeEventHandler
        
        Public Event MOI_TEM_RESULTRowDeleted As MOI_TEM_RESULTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMOI_TEM_RESULTRow(ByVal row As MOI_TEM_RESULTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMOI_TEM_RESULTRow( _
                    ByVal AFISID As Double,  _
                    ByVal DOCUMENTNO As String,  _
                    ByVal SURNAME_KHMER As String,  _
                    ByVal GIVENNAME_KHMER As String,  _
                    ByVal GENDER_TEXT As String,  _
                    ByVal POL_CAPITALPROVINCE_TEXT As String,  _
                    ByVal POL_SECTIONCITYDISTRICT_TEXT As String,  _
                    ByVal POL_COMMUNECITYQUARTER_TEXT As String,  _
                    ByVal DATEOFBIRTH As Date,  _
                    ByVal ROW_POSITION As Double,  _
                    ByVal RegistrationId As Double,  _
                    ByVal IDNumber As String,  _
                    ByVal FamilyName As String,  _
                    ByVal GivenName As String,  _
                    ByVal Gender As Decimal,  _
                    ByVal DateOfBirthKJB As Date,  _
                    ByVal ProvinceCode As Decimal,  _
                    ByVal ProvinceKh As String,  _
                    ByVal CommuneCode As Decimal,  _
                    ByVal CommuneKh As String,  _
                    ByVal DATE_SCAN As Date) As MOI_TEM_RESULTRow
            Dim rowMOI_TEM_RESULTRow As MOI_TEM_RESULTRow = CType(Me.NewRow,MOI_TEM_RESULTRow)
            Dim columnValuesArray() As Object = New Object() {AFISID, DOCUMENTNO, SURNAME_KHMER, GIVENNAME_KHMER, GENDER_TEXT, POL_CAPITALPROVINCE_TEXT, POL_SECTIONCITYDISTRICT_TEXT, POL_COMMUNECITYQUARTER_TEXT, DATEOFBIRTH, ROW_POSITION, RegistrationId, IDNumber, FamilyName, GivenName, Gender, DateOfBirthKJB, ProvinceCode, ProvinceKh, CommuneCode, CommuneKh, DATE_SCAN}
            rowMOI_TEM_RESULTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMOI_TEM_RESULTRow)
            Return rowMOI_TEM_RESULTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MOI_TEM_RESULTDataTable = CType(MyBase.Clone,MOI_TEM_RESULTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MOI_TEM_RESULTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAFISID = MyBase.Columns("AFISID")
            Me.columnDOCUMENTNO = MyBase.Columns("DOCUMENTNO")
            Me.columnSURNAME_KHMER = MyBase.Columns("SURNAME_KHMER")
            Me.columnGIVENNAME_KHMER = MyBase.Columns("GIVENNAME_KHMER")
            Me.columnGENDER_TEXT = MyBase.Columns("GENDER_TEXT")
            Me.columnPOL_CAPITALPROVINCE_TEXT = MyBase.Columns("POL_CAPITALPROVINCE_TEXT")
            Me.columnPOL_SECTIONCITYDISTRICT_TEXT = MyBase.Columns("POL_SECTIONCITYDISTRICT_TEXT")
            Me.columnPOL_COMMUNECITYQUARTER_TEXT = MyBase.Columns("POL_COMMUNECITYQUARTER_TEXT")
            Me.columnDATEOFBIRTH = MyBase.Columns("DATEOFBIRTH")
            Me.columnROW_POSITION = MyBase.Columns("ROW_POSITION")
            Me.columnRegistrationId = MyBase.Columns("RegistrationId")
            Me.columnIDNumber = MyBase.Columns("IDNumber")
            Me.columnFamilyName = MyBase.Columns("FamilyName")
            Me.columnGivenName = MyBase.Columns("GivenName")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnDateOfBirthKJB = MyBase.Columns("DateOfBirthKJB")
            Me.columnProvinceCode = MyBase.Columns("ProvinceCode")
            Me.columnProvinceKh = MyBase.Columns("ProvinceKh")
            Me.columnCommuneCode = MyBase.Columns("CommuneCode")
            Me.columnCommuneKh = MyBase.Columns("CommuneKh")
            Me.columnDATE_SCAN = MyBase.Columns("DATE_SCAN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAFISID = New Global.System.Data.DataColumn("AFISID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAFISID)
            Me.columnDOCUMENTNO = New Global.System.Data.DataColumn("DOCUMENTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTNO)
            Me.columnSURNAME_KHMER = New Global.System.Data.DataColumn("SURNAME_KHMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSURNAME_KHMER)
            Me.columnGIVENNAME_KHMER = New Global.System.Data.DataColumn("GIVENNAME_KHMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGIVENNAME_KHMER)
            Me.columnGENDER_TEXT = New Global.System.Data.DataColumn("GENDER_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENDER_TEXT)
            Me.columnPOL_CAPITALPROVINCE_TEXT = New Global.System.Data.DataColumn("POL_CAPITALPROVINCE_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_CAPITALPROVINCE_TEXT)
            Me.columnPOL_SECTIONCITYDISTRICT_TEXT = New Global.System.Data.DataColumn("POL_SECTIONCITYDISTRICT_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_SECTIONCITYDISTRICT_TEXT)
            Me.columnPOL_COMMUNECITYQUARTER_TEXT = New Global.System.Data.DataColumn("POL_COMMUNECITYQUARTER_TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL_COMMUNECITYQUARTER_TEXT)
            Me.columnDATEOFBIRTH = New Global.System.Data.DataColumn("DATEOFBIRTH", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEOFBIRTH)
            Me.columnROW_POSITION = New Global.System.Data.DataColumn("ROW_POSITION", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROW_POSITION)
            Me.columnRegistrationId = New Global.System.Data.DataColumn("RegistrationId", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrationId)
            Me.columnIDNumber = New Global.System.Data.DataColumn("IDNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDNumber)
            Me.columnFamilyName = New Global.System.Data.DataColumn("FamilyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamilyName)
            Me.columnGivenName = New Global.System.Data.DataColumn("GivenName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGivenName)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnDateOfBirthKJB = New Global.System.Data.DataColumn("DateOfBirthKJB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateOfBirthKJB)
            Me.columnProvinceCode = New Global.System.Data.DataColumn("ProvinceCode", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvinceCode)
            Me.columnProvinceKh = New Global.System.Data.DataColumn("ProvinceKh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvinceKh)
            Me.columnCommuneCode = New Global.System.Data.DataColumn("CommuneCode", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommuneCode)
            Me.columnCommuneKh = New Global.System.Data.DataColumn("CommuneKh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommuneKh)
            Me.columnDATE_SCAN = New Global.System.Data.DataColumn("DATE_SCAN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_SCAN)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMOI_TEM_RESULTRow() As MOI_TEM_RESULTRow
            Return CType(Me.NewRow,MOI_TEM_RESULTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MOI_TEM_RESULTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MOI_TEM_RESULTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MOI_TEM_RESULTRowChangedEvent) Is Nothing) Then
                RaiseEvent MOI_TEM_RESULTRowChanged(Me, New MOI_TEM_RESULTRowChangeEvent(CType(e.Row,MOI_TEM_RESULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MOI_TEM_RESULTRowChangingEvent) Is Nothing) Then
                RaiseEvent MOI_TEM_RESULTRowChanging(Me, New MOI_TEM_RESULTRowChangeEvent(CType(e.Row,MOI_TEM_RESULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MOI_TEM_RESULTRowDeletedEvent) Is Nothing) Then
                RaiseEvent MOI_TEM_RESULTRowDeleted(Me, New MOI_TEM_RESULTRowChangeEvent(CType(e.Row,MOI_TEM_RESULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MOI_TEM_RESULTRowDeletingEvent) Is Nothing) Then
                RaiseEvent MOI_TEM_RESULTRowDeleting(Me, New MOI_TEM_RESULTRowChangeEvent(CType(e.Row,MOI_TEM_RESULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMOI_TEM_RESULTRow(ByVal row As MOI_TEM_RESULTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSIDVerification = New DSIDVerification
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MOI_TEM_RESULTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TBL_PROVINCERow
        Inherits Global.System.Data.DataRow
        
        Private tableTBL_PROVINCE As TBL_PROVINCEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTBL_PROVINCE = CType(Me.Table,TBL_PROVINCEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROVINCEID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBL_PROVINCE.PROVINCEIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROVINCEID' in table 'TBL_PROVINCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_PROVINCE.PROVINCEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROV_EN() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_PROVINCE.PROV_ENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROV_EN' in table 'TBL_PROVINCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_PROVINCE.PROV_ENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROV_KH() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_PROVINCE.PROV_KHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROV_KH' in table 'TBL_PROVINCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_PROVINCE.PROV_KHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALIDFROM() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_PROVINCE.VALIDFROMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALIDFROM' in table 'TBL_PROVINCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_PROVINCE.VALIDFROMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALIDTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_PROVINCE.VALIDTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALIDTO' in table 'TBL_PROVINCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_PROVINCE.VALIDTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROVINCEIDNull() As Boolean
            Return Me.IsNull(Me.tableTBL_PROVINCE.PROVINCEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROVINCEIDNull()
            Me(Me.tableTBL_PROVINCE.PROVINCEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROV_ENNull() As Boolean
            Return Me.IsNull(Me.tableTBL_PROVINCE.PROV_ENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROV_ENNull()
            Me(Me.tableTBL_PROVINCE.PROV_ENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROV_KHNull() As Boolean
            Return Me.IsNull(Me.tableTBL_PROVINCE.PROV_KHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROV_KHNull()
            Me(Me.tableTBL_PROVINCE.PROV_KHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALIDFROMNull() As Boolean
            Return Me.IsNull(Me.tableTBL_PROVINCE.VALIDFROMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALIDFROMNull()
            Me(Me.tableTBL_PROVINCE.VALIDFROMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALIDTONull() As Boolean
            Return Me.IsNull(Me.tableTBL_PROVINCE.VALIDTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALIDTONull()
            Me(Me.tableTBL_PROVINCE.VALIDTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TBL_DISTRICTRow
        Inherits Global.System.Data.DataRow
        
        Private tableTBL_DISTRICT As TBL_DISTRICTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTBL_DISTRICT = CType(Me.Table,TBL_DISTRICTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISTRICTID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBL_DISTRICT.DISTRICTIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISTRICTID' in table 'TBL_DISTRICT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_DISTRICT.DISTRICTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIST_EN() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_DISTRICT.DIST_ENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIST_EN' in table 'TBL_DISTRICT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_DISTRICT.DIST_ENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIST_KH() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_DISTRICT.DIST_KHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIST_KH' in table 'TBL_DISTRICT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_DISTRICT.DIST_KHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIST_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_DISTRICT.DIST_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIST_TYPE' in table 'TBL_DISTRICT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_DISTRICT.DIST_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROVINCEID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBL_DISTRICT.PROVINCEIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROVINCEID' in table 'TBL_DISTRICT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_DISTRICT.PROVINCEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALIDFROM() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_DISTRICT.VALIDFROMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALIDFROM' in table 'TBL_DISTRICT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_DISTRICT.VALIDFROMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALIDTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_DISTRICT.VALIDTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALIDTO' in table 'TBL_DISTRICT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_DISTRICT.VALIDTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISTRICTIDNull() As Boolean
            Return Me.IsNull(Me.tableTBL_DISTRICT.DISTRICTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISTRICTIDNull()
            Me(Me.tableTBL_DISTRICT.DISTRICTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIST_ENNull() As Boolean
            Return Me.IsNull(Me.tableTBL_DISTRICT.DIST_ENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIST_ENNull()
            Me(Me.tableTBL_DISTRICT.DIST_ENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIST_KHNull() As Boolean
            Return Me.IsNull(Me.tableTBL_DISTRICT.DIST_KHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIST_KHNull()
            Me(Me.tableTBL_DISTRICT.DIST_KHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIST_TYPENull() As Boolean
            Return Me.IsNull(Me.tableTBL_DISTRICT.DIST_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIST_TYPENull()
            Me(Me.tableTBL_DISTRICT.DIST_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROVINCEIDNull() As Boolean
            Return Me.IsNull(Me.tableTBL_DISTRICT.PROVINCEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROVINCEIDNull()
            Me(Me.tableTBL_DISTRICT.PROVINCEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALIDFROMNull() As Boolean
            Return Me.IsNull(Me.tableTBL_DISTRICT.VALIDFROMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALIDFROMNull()
            Me(Me.tableTBL_DISTRICT.VALIDFROMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALIDTONull() As Boolean
            Return Me.IsNull(Me.tableTBL_DISTRICT.VALIDTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALIDTONull()
            Me(Me.tableTBL_DISTRICT.VALIDTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TBL_COMMUNERow
        Inherits Global.System.Data.DataRow
        
        Private tableTBL_COMMUNE As TBL_COMMUNEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTBL_COMMUNE = CType(Me.Table,TBL_COMMUNEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMUNEID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBL_COMMUNE.COMMUNEIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMUNEID' in table 'TBL_COMMUNE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_COMMUNE.COMMUNEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMM_EN() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_COMMUNE.COMM_ENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMM_EN' in table 'TBL_COMMUNE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_COMMUNE.COMM_ENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMM_KH() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_COMMUNE.COMM_KHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMM_KH' in table 'TBL_COMMUNE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_COMMUNE.COMM_KHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMM_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_COMMUNE.COMM_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMM_TYPE' in table 'TBL_COMMUNE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_COMMUNE.COMM_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISTRICTID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBL_COMMUNE.DISTRICTIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISTRICTID' in table 'TBL_COMMUNE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_COMMUNE.DISTRICTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALIDFROM() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_COMMUNE.VALIDFROMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALIDFROM' in table 'TBL_COMMUNE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_COMMUNE.VALIDFROMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALIDTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_COMMUNE.VALIDTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALIDTO' in table 'TBL_COMMUNE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_COMMUNE.VALIDTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMUNEIDNull() As Boolean
            Return Me.IsNull(Me.tableTBL_COMMUNE.COMMUNEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMUNEIDNull()
            Me(Me.tableTBL_COMMUNE.COMMUNEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMM_ENNull() As Boolean
            Return Me.IsNull(Me.tableTBL_COMMUNE.COMM_ENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMM_ENNull()
            Me(Me.tableTBL_COMMUNE.COMM_ENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMM_KHNull() As Boolean
            Return Me.IsNull(Me.tableTBL_COMMUNE.COMM_KHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMM_KHNull()
            Me(Me.tableTBL_COMMUNE.COMM_KHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMM_TYPENull() As Boolean
            Return Me.IsNull(Me.tableTBL_COMMUNE.COMM_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMM_TYPENull()
            Me(Me.tableTBL_COMMUNE.COMM_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISTRICTIDNull() As Boolean
            Return Me.IsNull(Me.tableTBL_COMMUNE.DISTRICTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISTRICTIDNull()
            Me(Me.tableTBL_COMMUNE.DISTRICTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALIDFROMNull() As Boolean
            Return Me.IsNull(Me.tableTBL_COMMUNE.VALIDFROMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALIDFROMNull()
            Me(Me.tableTBL_COMMUNE.VALIDFROMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALIDTONull() As Boolean
            Return Me.IsNull(Me.tableTBL_COMMUNE.VALIDTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALIDTONull()
            Me(Me.tableTBL_COMMUNE.VALIDTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TBL_VILLAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableTBL_VILLAGE As TBL_VILLAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTBL_VILLAGE = CType(Me.Table,TBL_VILLAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VILLAGEID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBL_VILLAGE.VILLAGEIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VILLAGEID' in table 'TBL_VILLAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_VILLAGE.VILLAGEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VILL_EN() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_VILLAGE.VILL_ENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VILL_EN' in table 'TBL_VILLAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_VILLAGE.VILL_ENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VILL_KH() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_VILLAGE.VILL_KHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VILL_KH' in table 'TBL_VILLAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_VILLAGE.VILL_KHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VILL_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_VILLAGE.VILL_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VILL_TYPE' in table 'TBL_VILLAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_VILLAGE.VILL_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMUNEID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBL_VILLAGE.COMMUNEIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMUNEID' in table 'TBL_VILLAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_VILLAGE.COMMUNEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALIDFROM() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_VILLAGE.VALIDFROMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALIDFROM' in table 'TBL_VILLAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_VILLAGE.VALIDFROMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALIDTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBL_VILLAGE.VALIDTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALIDTO' in table 'TBL_VILLAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBL_VILLAGE.VALIDTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVILLAGEIDNull() As Boolean
            Return Me.IsNull(Me.tableTBL_VILLAGE.VILLAGEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVILLAGEIDNull()
            Me(Me.tableTBL_VILLAGE.VILLAGEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVILL_ENNull() As Boolean
            Return Me.IsNull(Me.tableTBL_VILLAGE.VILL_ENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVILL_ENNull()
            Me(Me.tableTBL_VILLAGE.VILL_ENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVILL_KHNull() As Boolean
            Return Me.IsNull(Me.tableTBL_VILLAGE.VILL_KHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVILL_KHNull()
            Me(Me.tableTBL_VILLAGE.VILL_KHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVILL_TYPENull() As Boolean
            Return Me.IsNull(Me.tableTBL_VILLAGE.VILL_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVILL_TYPENull()
            Me(Me.tableTBL_VILLAGE.VILL_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMUNEIDNull() As Boolean
            Return Me.IsNull(Me.tableTBL_VILLAGE.COMMUNEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMUNEIDNull()
            Me(Me.tableTBL_VILLAGE.COMMUNEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALIDFROMNull() As Boolean
            Return Me.IsNull(Me.tableTBL_VILLAGE.VALIDFROMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALIDFROMNull()
            Me(Me.tableTBL_VILLAGE.VALIDFROMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALIDTONull() As Boolean
            Return Me.IsNull(Me.tableTBL_VILLAGE.VALIDTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALIDTONull()
            Me(Me.tableTBL_VILLAGE.VALIDTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_PEOPLE_VERIFICATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_PEOPLE_VERIFICATION As VIEW_PEOPLE_VERIFICATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PEOPLE_VERIFICATION = CType(Me.Table,VIEW_PEOPLE_VERIFICATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property documentno() As String
            Get
                Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.documentnoColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.documentnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property barcodeno() As String
            Get
                If Me.IsbarcodenoNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.barcodenoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.barcodenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property surname_khmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.surname_khmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'surname_khmer' in table 'VIEW_PEOPLE_VERIFICATION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.surname_khmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property givenname_khmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.givenname_khmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'givenname_khmer' in table 'VIEW_PEOPLE_VERIFICATION' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.givenname_khmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KhmerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.KhmerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KhmerName' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.KhmerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property surname_latin() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.surname_latinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'surname_latin' in table 'VIEW_PEOPLE_VERIFICATION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.surname_latinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property givenname_latin() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.givenname_latinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'givenname_latin' in table 'VIEW_PEOPLE_VERIFICATION' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.givenname_latinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LatinName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.LatinNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LatinName' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.LatinNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.sexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sex' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.sexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateofbirth() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.dateofbirthColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dateofbirth' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.dateofbirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property date_of_registration() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.date_of_registrationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'date_of_registration' in table 'VIEW_PEOPLE_VERIFICATION' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.date_of_registrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobvillage() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobvillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobvillage' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobvillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobcommune() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobcommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobcommune' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobcommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobdistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobdistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobdistrict' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobdistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobprovince() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobprovinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobprovince' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobprovinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OldDress() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.OldDressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldDress' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.OldDressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property polvillage() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.polvillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'polvillage' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.polvillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property polcommune() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.polcommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'polcommune' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.polcommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property poldistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.poldistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'poldistrict' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.poldistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property polprovince() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.polprovinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'polprovince' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.polprovinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.CurrentAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentAddress' in table 'VIEW_PEOPLE_VERIFICATION' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.CurrentAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reason() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.reasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'reason' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.reasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property photo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.photoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'photo' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.photoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property other() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.otherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'other' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.otherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrationform() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.registrationformColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'registrationform' in table 'VIEW_PEOPLE_VERIFICATION' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.registrationformColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerBarcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerBarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerBarcode' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerBarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerSurnameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerSurnameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerSurnameKhmer' in table 'VIEW_PEOPLE_VERIFICATION' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerSurnameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerGiveNamekhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerGiveNamekhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerGiveNamekhmer' in table 'VIEW_PEOPLE_VERIFICATION' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerGiveNamekhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerSurnameLatin() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerSurnameLatinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerSurnameLatin' in table 'VIEW_PEOPLE_VERIFICATION' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerSurnameLatinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerGiveNameLatin() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerGiveNameLatinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerGiveNameLatin' in table 'VIEW_PEOPLE_VERIFICATION' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerGiveNameLatinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerSex() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerSexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerSex' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerSexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerDateOfBirth() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerDateOfBirthColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerDateOfBirth' in table 'VIEW_PEOPLE_VERIFICATION' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerDateOfBirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerDateOfRegistration() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerDateOfRegistrationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerDateOfRegistration' in table 'VIEW_PEOPLE_VERIFICATION' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerDateOfRegistrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPobVillage() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobVillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPobVillage' in table 'VIEW_PEOPLE_VERIFICATION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobVillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPobCommune() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobCommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPobCommune' in table 'VIEW_PEOPLE_VERIFICATION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobCommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerDistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerDistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerDistrict' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerDistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPobProvince() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPobProvince' in table 'VIEW_PEOPLE_VERIFICATION' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPolVillage() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolVillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPolVillage' in table 'VIEW_PEOPLE_VERIFICATION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolVillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPolCommune() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolCommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPolCommune' in table 'VIEW_PEOPLE_VERIFICATION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolCommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPolDistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolDistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPolDistrict' in table 'VIEW_PEOPLE_VERIFICATION' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolDistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPolProvince() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPolProvince' in table 'VIEW_PEOPLE_VERIFICATION' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerReason() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerReasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerReason' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerReasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPhoto() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPhotoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPhoto' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPhotoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerOther() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerOtherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerOther' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerOtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerRegistrationform() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerRegistrationformColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerRegistrationform' in table 'VIEW_PEOPLE_VERIFICATION' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerRegistrationformColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property afisid() As Integer
            Get
                Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.afisidColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.afisidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Printed() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.PrintedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Printed' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.PrintedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Verification() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerificationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Verification' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrintDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PEOPLE_VERIFICATION.PrintDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrintDate' in table 'VIEW_PEOPLE_VERIFICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PEOPLE_VERIFICATION.PrintDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbarcodenoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.barcodenoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbarcodenoNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.barcodenoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issurname_khmerNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.surname_khmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsurname_khmerNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.surname_khmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgivenname_khmerNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.givenname_khmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgivenname_khmerNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.givenname_khmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKhmerNameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.KhmerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKhmerNameNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.KhmerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issurname_latinNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.surname_latinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsurname_latinNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.surname_latinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgivenname_latinNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.givenname_latinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgivenname_latinNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.givenname_latinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLatinNameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.LatinNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLatinNameNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.LatinNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.sexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsexNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.sexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdateofbirthNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.dateofbirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdateofbirthNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.dateofbirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdate_of_registrationNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.date_of_registrationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdate_of_registrationNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.date_of_registrationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobvillageNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.pobvillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobvillageNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobvillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobcommuneNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.pobcommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobcommuneNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobcommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobdistrictNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.pobdistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobdistrictNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobdistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobprovinceNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.pobprovinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobprovinceNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.pobprovinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOldDressNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.OldDressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOldDressNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.OldDressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspolvillageNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.polvillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpolvillageNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.polvillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspolcommuneNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.polcommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpolcommuneNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.polcommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspoldistrictNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.poldistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpoldistrictNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.poldistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspolprovinceNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.polprovinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpolprovinceNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.polprovinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentAddressNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.CurrentAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentAddressNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.CurrentAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreasonNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.reasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreasonNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.reasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsphotoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.photoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetphotoNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.photoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsotherNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.otherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetotherNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.otherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregistrationformNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.registrationformColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregistrationformNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.registrationformColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerBarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerBarcodeNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerBarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerSurnameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerSurnameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerSurnameKhmerNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerSurnameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerGiveNamekhmerNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerGiveNamekhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerGiveNamekhmerNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerGiveNamekhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerSurnameLatinNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerSurnameLatinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerSurnameLatinNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerSurnameLatinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerGiveNameLatinNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerGiveNameLatinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerGiveNameLatinNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerGiveNameLatinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerSexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerSexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerSexNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerSexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerDateOfBirthNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerDateOfBirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerDateOfBirthNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerDateOfBirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerDateOfRegistrationNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerDateOfRegistrationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerDateOfRegistrationNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerDateOfRegistrationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPobVillageNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobVillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPobVillageNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobVillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPobCommuneNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobCommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPobCommuneNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobCommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerDistrictNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerDistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerDistrictNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerDistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPobProvinceNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPobProvinceNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPobProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPolVillageNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolVillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPolVillageNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolVillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPolCommuneNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolCommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPolCommuneNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolCommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPolDistrictNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolDistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPolDistrictNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolDistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPolProvinceNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPolProvinceNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPolProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerReasonNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerReasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerReasonNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerReasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPhotoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerPhotoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPhotoNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerPhotoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerOtherNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerOtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerOtherNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerOtherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerRegistrationformNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerRegistrationformColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerRegistrationformNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerRegistrationformColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintedNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.PrintedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintedNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.PrintedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerificationNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.VerificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerificationNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.VerificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintDateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PEOPLE_VERIFICATION.PrintDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintDateNull()
            Me(Me.tableVIEW_PEOPLE_VERIFICATION.PrintDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tbl_verificationRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbl_verification As tbl_verificationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl_verification = CType(Me.Table,tbl_verificationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property afisid() As Integer
            Get
                Return CType(Me(Me.tabletbl_verification.afisidColumn),Integer)
            End Get
            Set
                Me(Me.tabletbl_verification.afisidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property old_id() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.old_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'old_id' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.old_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property surname_khmer() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.surname_khmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'surname_khmer' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.surname_khmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property barcodeno() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.barcodenoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'barcodeno' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.barcodenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property givenname_khmer() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.givenname_khmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'givenname_khmer' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.givenname_khmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property surname_latin() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.surname_latinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'surname_latin' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.surname_latinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property givenname_latin() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.givenname_latinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'givenname_latin' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.givenname_latinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sex() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.sexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sex' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.sexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateofbirth() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.dateofbirthColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dateofbirth' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.dateofbirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property date_of_registration() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.date_of_registrationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'date_of_registration' in table 'tbl_verification' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.date_of_registrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobvillage() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.pobvillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobvillage' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.pobvillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobcommune() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.pobcommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobcommune' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.pobcommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobdistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.pobdistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobdistrict' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.pobdistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobprovince() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.pobprovinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobprovince' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.pobprovinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property polvillage() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.polvillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'polvillage' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.polvillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property polcommune() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.polcommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'polcommune' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.polcommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property poldistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.poldistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'poldistrict' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.poldistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property polprovince() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.polprovinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'polprovince' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.polprovinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reason() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.reasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'reason' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.reasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property photo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.photoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'photo' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.photoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property other() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.otherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'other' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.otherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrationform() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.registrationformColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'registrationform' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.registrationformColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Printed() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.PrintedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Printed' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.PrintedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Verification() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.VerificationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Verification' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.VerificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrintDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_verification.PrintDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrintDate' in table 'tbl_verification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_verification.PrintDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isold_idNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.old_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setold_idNull()
            Me(Me.tabletbl_verification.old_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issurname_khmerNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.surname_khmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsurname_khmerNull()
            Me(Me.tabletbl_verification.surname_khmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbarcodenoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.barcodenoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbarcodenoNull()
            Me(Me.tabletbl_verification.barcodenoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgivenname_khmerNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.givenname_khmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgivenname_khmerNull()
            Me(Me.tabletbl_verification.givenname_khmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issurname_latinNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.surname_latinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsurname_latinNull()
            Me(Me.tabletbl_verification.surname_latinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgivenname_latinNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.givenname_latinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgivenname_latinNull()
            Me(Me.tabletbl_verification.givenname_latinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssexNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.sexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsexNull()
            Me(Me.tabletbl_verification.sexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdateofbirthNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.dateofbirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdateofbirthNull()
            Me(Me.tabletbl_verification.dateofbirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdate_of_registrationNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.date_of_registrationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdate_of_registrationNull()
            Me(Me.tabletbl_verification.date_of_registrationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobvillageNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.pobvillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobvillageNull()
            Me(Me.tabletbl_verification.pobvillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobcommuneNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.pobcommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobcommuneNull()
            Me(Me.tabletbl_verification.pobcommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobdistrictNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.pobdistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobdistrictNull()
            Me(Me.tabletbl_verification.pobdistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobprovinceNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.pobprovinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobprovinceNull()
            Me(Me.tabletbl_verification.pobprovinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspolvillageNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.polvillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpolvillageNull()
            Me(Me.tabletbl_verification.polvillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspolcommuneNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.polcommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpolcommuneNull()
            Me(Me.tabletbl_verification.polcommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspoldistrictNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.poldistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpoldistrictNull()
            Me(Me.tabletbl_verification.poldistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspolprovinceNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.polprovinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpolprovinceNull()
            Me(Me.tabletbl_verification.polprovinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreasonNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.reasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreasonNull()
            Me(Me.tabletbl_verification.reasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsphotoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.photoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetphotoNull()
            Me(Me.tabletbl_verification.photoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsotherNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.otherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetotherNull()
            Me(Me.tabletbl_verification.otherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregistrationformNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.registrationformColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregistrationformNull()
            Me(Me.tabletbl_verification.registrationformColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintedNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.PrintedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintedNull()
            Me(Me.tabletbl_verification.PrintedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerificationNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.VerificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerificationNull()
            Me(Me.tabletbl_verification.VerificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintDateNull() As Boolean
            Return Me.IsNull(Me.tabletbl_verification.PrintDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintDateNull()
            Me(Me.tabletbl_verification.PrintDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TblFormVerifyRow
        Inherits Global.System.Data.DataRow
        
        Private tableTblFormVerify As TblFormVerifyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTblFormVerify = CType(Me.Table,TblFormVerifyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property documentno() As String
            Get
                Return CType(Me(Me.tableTblFormVerify.documentnoColumn),String)
            End Get
            Set
                Me(Me.tableTblFormVerify.documentnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property barcodeno() As String
            Get
                If Me.IsbarcodenoNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableTblFormVerify.barcodenoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTblFormVerify.barcodenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property surname_khmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.surname_khmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'surname_khmer' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.surname_khmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property givenname_khmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.givenname_khmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'givenname_khmer' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.givenname_khmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KhmerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.KhmerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KhmerName' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.KhmerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property surname_latin() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.surname_latinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'surname_latin' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.surname_latinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property givenname_latin() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.givenname_latinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'givenname_latin' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.givenname_latinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LatinName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.LatinNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LatinName' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.LatinNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.sexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sex' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.sexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateofbirth() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.dateofbirthColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dateofbirth' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.dateofbirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property date_of_registration() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.date_of_registrationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'date_of_registration' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.date_of_registrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobvillage() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.pobvillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobvillage' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.pobvillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobcommune() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.pobcommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobcommune' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.pobcommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobdistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.pobdistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobdistrict' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.pobdistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pobprovince() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.pobprovinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pobprovince' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.pobprovinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OldDress() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.OldDressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldDress' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.OldDressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property polvillage() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.polvillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'polvillage' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.polvillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property polcommune() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.polcommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'polcommune' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.polcommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property poldistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.poldistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'poldistrict' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.poldistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property polprovince() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.polprovinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'polprovince' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.polprovinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.CurrentAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentAddress' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.CurrentAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reason() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.reasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'reason' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.reasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property photo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.photoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'photo' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.photoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property other() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.otherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'other' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.otherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrationform() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.registrationformColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'registrationform' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.registrationformColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerBarcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerBarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerBarcode' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerBarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerSurnameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerSurnameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerSurnameKhmer' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerSurnameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerGiveNamekhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerGiveNamekhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerGiveNamekhmer' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerGiveNamekhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerSurnameLatin() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerSurnameLatinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerSurnameLatin' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerSurnameLatinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerGiveNameLatin() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerGiveNameLatinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerGiveNameLatin' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerGiveNameLatinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerSex() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerSexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerSex' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerSexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerDateOfBirth() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerDateOfBirthColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerDateOfBirth' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerDateOfBirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerDateOfRegistration() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerDateOfRegistrationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerDateOfRegistration' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerDateOfRegistrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPobVillage() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerPobVillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPobVillage' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerPobVillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPobCommune() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerPobCommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPobCommune' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerPobCommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerDistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerDistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerDistrict' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerDistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPobProvince() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerPobProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPobProvince' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerPobProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPolVillage() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerPolVillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPolVillage' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerPolVillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPolCommune() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerPolCommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPolCommune' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerPolCommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPolDistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerPolDistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPolDistrict' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerPolDistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPolProvince() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerPolProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPolProvince' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerPolProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerReason() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerReasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerReason' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerReasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerPhoto() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerPhotoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerPhoto' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerPhotoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerOther() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerOtherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerOther' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerOtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerRegistrationform() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerRegistrationformColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerRegistrationform' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerRegistrationformColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property afisid() As Integer
            Get
                Return CType(Me(Me.tableTblFormVerify.afisidColumn),Integer)
            End Get
            Set
                Me(Me.tableTblFormVerify.afisidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Printed() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.PrintedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Printed' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.PrintedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Verification() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerificationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Verification' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrintDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.PrintDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrintDate' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.PrintDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerifKhmerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerifKhmerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerifKhmerName' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerifKhmerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerifLatinName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblFormVerify.VerifLatinNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VerifLatinName' in table 'TblFormVerify' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblFormVerify.VerifLatinNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbarcodenoNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.barcodenoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbarcodenoNull()
            Me(Me.tableTblFormVerify.barcodenoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issurname_khmerNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.surname_khmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsurname_khmerNull()
            Me(Me.tableTblFormVerify.surname_khmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgivenname_khmerNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.givenname_khmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgivenname_khmerNull()
            Me(Me.tableTblFormVerify.givenname_khmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKhmerNameNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.KhmerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKhmerNameNull()
            Me(Me.tableTblFormVerify.KhmerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issurname_latinNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.surname_latinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsurname_latinNull()
            Me(Me.tableTblFormVerify.surname_latinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgivenname_latinNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.givenname_latinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgivenname_latinNull()
            Me(Me.tableTblFormVerify.givenname_latinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLatinNameNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.LatinNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLatinNameNull()
            Me(Me.tableTblFormVerify.LatinNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssexNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.sexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsexNull()
            Me(Me.tableTblFormVerify.sexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdateofbirthNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.dateofbirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdateofbirthNull()
            Me(Me.tableTblFormVerify.dateofbirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdate_of_registrationNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.date_of_registrationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdate_of_registrationNull()
            Me(Me.tableTblFormVerify.date_of_registrationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobvillageNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.pobvillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobvillageNull()
            Me(Me.tableTblFormVerify.pobvillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobcommuneNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.pobcommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobcommuneNull()
            Me(Me.tableTblFormVerify.pobcommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobdistrictNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.pobdistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobdistrictNull()
            Me(Me.tableTblFormVerify.pobdistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspobprovinceNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.pobprovinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpobprovinceNull()
            Me(Me.tableTblFormVerify.pobprovinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOldDressNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.OldDressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOldDressNull()
            Me(Me.tableTblFormVerify.OldDressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspolvillageNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.polvillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpolvillageNull()
            Me(Me.tableTblFormVerify.polvillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspolcommuneNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.polcommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpolcommuneNull()
            Me(Me.tableTblFormVerify.polcommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspoldistrictNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.poldistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpoldistrictNull()
            Me(Me.tableTblFormVerify.poldistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspolprovinceNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.polprovinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpolprovinceNull()
            Me(Me.tableTblFormVerify.polprovinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentAddressNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.CurrentAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentAddressNull()
            Me(Me.tableTblFormVerify.CurrentAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreasonNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.reasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreasonNull()
            Me(Me.tableTblFormVerify.reasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsphotoNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.photoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetphotoNull()
            Me(Me.tableTblFormVerify.photoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsotherNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.otherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetotherNull()
            Me(Me.tableTblFormVerify.otherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregistrationformNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.registrationformColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregistrationformNull()
            Me(Me.tableTblFormVerify.registrationformColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerBarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerBarcodeNull()
            Me(Me.tableTblFormVerify.VerBarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerSurnameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerSurnameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerSurnameKhmerNull()
            Me(Me.tableTblFormVerify.VerSurnameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerGiveNamekhmerNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerGiveNamekhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerGiveNamekhmerNull()
            Me(Me.tableTblFormVerify.VerGiveNamekhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerSurnameLatinNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerSurnameLatinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerSurnameLatinNull()
            Me(Me.tableTblFormVerify.VerSurnameLatinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerGiveNameLatinNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerGiveNameLatinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerGiveNameLatinNull()
            Me(Me.tableTblFormVerify.VerGiveNameLatinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerSexNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerSexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerSexNull()
            Me(Me.tableTblFormVerify.VerSexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerDateOfBirthNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerDateOfBirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerDateOfBirthNull()
            Me(Me.tableTblFormVerify.VerDateOfBirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerDateOfRegistrationNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerDateOfRegistrationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerDateOfRegistrationNull()
            Me(Me.tableTblFormVerify.VerDateOfRegistrationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPobVillageNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerPobVillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPobVillageNull()
            Me(Me.tableTblFormVerify.VerPobVillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPobCommuneNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerPobCommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPobCommuneNull()
            Me(Me.tableTblFormVerify.VerPobCommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerDistrictNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerDistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerDistrictNull()
            Me(Me.tableTblFormVerify.VerDistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPobProvinceNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerPobProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPobProvinceNull()
            Me(Me.tableTblFormVerify.VerPobProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPolVillageNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerPolVillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPolVillageNull()
            Me(Me.tableTblFormVerify.VerPolVillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPolCommuneNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerPolCommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPolCommuneNull()
            Me(Me.tableTblFormVerify.VerPolCommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPolDistrictNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerPolDistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPolDistrictNull()
            Me(Me.tableTblFormVerify.VerPolDistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPolProvinceNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerPolProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPolProvinceNull()
            Me(Me.tableTblFormVerify.VerPolProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerReasonNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerReasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerReasonNull()
            Me(Me.tableTblFormVerify.VerReasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerPhotoNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerPhotoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerPhotoNull()
            Me(Me.tableTblFormVerify.VerPhotoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerOtherNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerOtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerOtherNull()
            Me(Me.tableTblFormVerify.VerOtherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerRegistrationformNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerRegistrationformColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerRegistrationformNull()
            Me(Me.tableTblFormVerify.VerRegistrationformColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintedNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.PrintedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintedNull()
            Me(Me.tableTblFormVerify.PrintedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerificationNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerificationNull()
            Me(Me.tableTblFormVerify.VerificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintDateNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.PrintDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintDateNull()
            Me(Me.tableTblFormVerify.PrintDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerifKhmerNameNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerifKhmerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerifKhmerNameNull()
            Me(Me.tableTblFormVerify.VerifKhmerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerifLatinNameNull() As Boolean
            Return Me.IsNull(Me.tableTblFormVerify.VerifLatinNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerifLatinNameNull()
            Me(Me.tableTblFormVerify.VerifLatinNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StatisticPeopleRow
        Inherits Global.System.Data.DataRow
        
        Private tableStatisticPeople As StatisticPeopleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStatisticPeople = CType(Me.Table,StatisticPeopleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AFISID() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.AFISIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AFISID' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.AFISIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BARCODENO() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.BARCODENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BARCODENO' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.BARCODENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOCUMENTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.DOCUMENTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOCUMENTNO' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.DOCUMENTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENROLLMENT_MB_SERIALNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.ENROLLMENT_MB_SERIALNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENROLLMENT_MB_SERIALNUMBER' in table 'StatisticPeople' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.ENROLLMENT_MB_SERIALNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENROLLMENT_UID() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.ENROLLMENT_UIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENROLLMENT_UID' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.ENROLLMENT_UIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SURNAME_KHMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.SURNAME_KHMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SURNAME_KHMER' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.SURNAME_KHMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GIVENNAME_KHMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.GIVENNAME_KHMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GIVENNAME_KHMER' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.GIVENNAME_KHMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SURNAME_LATIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.SURNAME_LATINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SURNAME_LATIN' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.SURNAME_LATINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GIVENNAME_LATIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.GIVENNAME_LATINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GIVENNAME_LATIN' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.GIVENNAME_LATINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GENDER_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.GENDER_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GENDER_TEXT' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.GENDER_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEOFBIRTH() As Date
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.DATEOFBIRTHColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEOFBIRTH' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.DATEOFBIRTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATE_OF_REGISTRATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.DATE_OF_REGISTRATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_OF_REGISTRATION' in table 'StatisticPeople' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.DATE_OF_REGISTRATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RACE_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.RACE_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RACE_TEXT' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.RACE_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POB_VILLAGE_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POB_VILLAGE_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POB_VILLAGE_TEXT' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POB_VILLAGE_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POB_COMMUNECITYQUARTER_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POB_COMMUNECITYQUARTER_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POB_COMMUNECITYQUARTER_TEXT' in table 'StatisticPeople' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POB_COMMUNECITYQUARTER_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POB_SECTIONCITYDISTRICT_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POB_SECTIONCITYDISTRICT_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POB_SECTIONCITYDISTRICT_TEXT' in table 'StatisticPeople' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POB_SECTIONCITYDISTRICT_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POB_CAPITALPROVINCE_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POB_CAPITALPROVINCE_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POB_CAPITALPROVINCE_TEXT' in table 'StatisticPeople' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POB_CAPITALPROVINCE_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDRESS' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STREET() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.STREETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STREET' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.STREETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_VILLAGE_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_VILLAGE_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_VILLAGE_TEXT' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_VILLAGE_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_COMMUNECITYQUARTER_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_COMMUNECITYQUARTER_TEXT' in table 'StatisticPeople' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_SECTIONCITYDISTRICT_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_SECTIONCITYDISTRICT_TEXT' in table 'StatisticPeople' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_CAPITALPROVINCE_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_CAPITALPROVINCE_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_CAPITALPROVINCE_TEXT' in table 'StatisticPeople' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_CAPITALPROVINCE_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_VILLAGE_CODE() As Long
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_VILLAGE_CODEColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_VILLAGE_CODE' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_VILLAGE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_COMMUNECITYQUARTER_CODE() As Long
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_CODEColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_COMMUNECITYQUARTER_CODE' in table 'StatisticPeople' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_SECTIONCITYDISTRICT_CODE() As Long
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_CODEColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_SECTIONCITYDISTRICT_CODE' in table 'StatisticPeople' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_CAPITALPROVINCE_CODE() As Long
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_CAPITALPROVINCE_CODEColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_CAPITALPROVINCE_CODE' in table 'StatisticPeople' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_CAPITALPROVINCE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFESSION() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.PROFESSIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFESSION' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.PROFESSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLACEOFOCCUPATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.PLACEOFOCCUPATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLACEOFOCCUPATION' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.PLACEOFOCCUPATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEIGHT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.HEIGHTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEIGHT' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.HEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPECIALSCAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.SPECIALSCARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIALSCAR' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.SPECIALSCARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISSUEDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.ISSUEDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISSUEDATE' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.ISSUEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPIRYDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.EXPIRYDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPIRYDATE' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.EXPIRYDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTEBOOKEXPDT_OLD() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.NOTEBOOKEXPDT_OLDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOTEBOOKEXPDT_OLD' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.NOTEBOOKEXPDT_OLDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SENTTOPRINTER() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.SENTTOPRINTERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SENTTOPRINTER' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.SENTTOPRINTERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NATIONALITY_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.NATIONALITY_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NATIONALITY_TEXT' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.NATIONALITY_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_COMMUNECITYQUARTER_TEXT_1() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_TEXT_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_COMMUNECITYQUARTER_TEXT_1' in table 'StatisticPeople' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_TEXT_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_SECTIONCITYDISTRICT_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_SECTIONCITYDISTRICT_TYPE' in table 'StatisticPeople' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RELIGION_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.RELIGION_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RELIGION_TEXT' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.RELIGION_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERSONID() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.PERSONIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERSONID' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.PERSONIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HQRECEIVEDDT() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.HQRECEIVEDDTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HQRECEIVEDDT' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.HQRECEIVEDDTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APPLICATIONTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.APPLICATIONTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APPLICATIONTYPE' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.APPLICATIONTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalAge() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableStatisticPeople.CalAgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalAge' in table 'StatisticPeople' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStatisticPeople.CalAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAFISIDNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.AFISIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAFISIDNull()
            Me(Me.tableStatisticPeople.AFISIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBARCODENONull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.BARCODENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBARCODENONull()
            Me(Me.tableStatisticPeople.BARCODENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOCUMENTNONull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.DOCUMENTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOCUMENTNONull()
            Me(Me.tableStatisticPeople.DOCUMENTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENROLLMENT_MB_SERIALNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.ENROLLMENT_MB_SERIALNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENROLLMENT_MB_SERIALNUMBERNull()
            Me(Me.tableStatisticPeople.ENROLLMENT_MB_SERIALNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENROLLMENT_UIDNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.ENROLLMENT_UIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENROLLMENT_UIDNull()
            Me(Me.tableStatisticPeople.ENROLLMENT_UIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSURNAME_KHMERNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.SURNAME_KHMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSURNAME_KHMERNull()
            Me(Me.tableStatisticPeople.SURNAME_KHMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGIVENNAME_KHMERNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.GIVENNAME_KHMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGIVENNAME_KHMERNull()
            Me(Me.tableStatisticPeople.GIVENNAME_KHMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSURNAME_LATINNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.SURNAME_LATINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSURNAME_LATINNull()
            Me(Me.tableStatisticPeople.SURNAME_LATINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGIVENNAME_LATINNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.GIVENNAME_LATINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGIVENNAME_LATINNull()
            Me(Me.tableStatisticPeople.GIVENNAME_LATINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGENDER_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.GENDER_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGENDER_TEXTNull()
            Me(Me.tableStatisticPeople.GENDER_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEOFBIRTHNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.DATEOFBIRTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEOFBIRTHNull()
            Me(Me.tableStatisticPeople.DATEOFBIRTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATE_OF_REGISTRATIONNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.DATE_OF_REGISTRATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATE_OF_REGISTRATIONNull()
            Me(Me.tableStatisticPeople.DATE_OF_REGISTRATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRACE_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.RACE_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRACE_TEXTNull()
            Me(Me.tableStatisticPeople.RACE_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOB_VILLAGE_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POB_VILLAGE_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOB_VILLAGE_TEXTNull()
            Me(Me.tableStatisticPeople.POB_VILLAGE_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOB_COMMUNECITYQUARTER_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POB_COMMUNECITYQUARTER_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOB_COMMUNECITYQUARTER_TEXTNull()
            Me(Me.tableStatisticPeople.POB_COMMUNECITYQUARTER_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOB_SECTIONCITYDISTRICT_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POB_SECTIONCITYDISTRICT_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOB_SECTIONCITYDISTRICT_TEXTNull()
            Me(Me.tableStatisticPeople.POB_SECTIONCITYDISTRICT_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOB_CAPITALPROVINCE_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POB_CAPITALPROVINCE_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOB_CAPITALPROVINCE_TEXTNull()
            Me(Me.tableStatisticPeople.POB_CAPITALPROVINCE_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDRESSNull()
            Me(Me.tableStatisticPeople.ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTREETNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.STREETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTREETNull()
            Me(Me.tableStatisticPeople.STREETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_VILLAGE_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_VILLAGE_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_VILLAGE_TEXTNull()
            Me(Me.tableStatisticPeople.POL_VILLAGE_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_COMMUNECITYQUARTER_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_COMMUNECITYQUARTER_TEXTNull()
            Me(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_SECTIONCITYDISTRICT_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_SECTIONCITYDISTRICT_TEXTNull()
            Me(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_CAPITALPROVINCE_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_CAPITALPROVINCE_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_CAPITALPROVINCE_TEXTNull()
            Me(Me.tableStatisticPeople.POL_CAPITALPROVINCE_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_VILLAGE_CODENull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_VILLAGE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_VILLAGE_CODENull()
            Me(Me.tableStatisticPeople.POL_VILLAGE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_COMMUNECITYQUARTER_CODENull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_COMMUNECITYQUARTER_CODENull()
            Me(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_SECTIONCITYDISTRICT_CODENull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_SECTIONCITYDISTRICT_CODENull()
            Me(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_CAPITALPROVINCE_CODENull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_CAPITALPROVINCE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_CAPITALPROVINCE_CODENull()
            Me(Me.tableStatisticPeople.POL_CAPITALPROVINCE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROFESSIONNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.PROFESSIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROFESSIONNull()
            Me(Me.tableStatisticPeople.PROFESSIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLACEOFOCCUPATIONNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.PLACEOFOCCUPATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLACEOFOCCUPATIONNull()
            Me(Me.tableStatisticPeople.PLACEOFOCCUPATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEIGHTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.HEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEIGHTNull()
            Me(Me.tableStatisticPeople.HEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPECIALSCARNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.SPECIALSCARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPECIALSCARNull()
            Me(Me.tableStatisticPeople.SPECIALSCARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsISSUEDATENull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.ISSUEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetISSUEDATENull()
            Me(Me.tableStatisticPeople.ISSUEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPIRYDATENull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.EXPIRYDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPIRYDATENull()
            Me(Me.tableStatisticPeople.EXPIRYDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOTEBOOKEXPDT_OLDNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.NOTEBOOKEXPDT_OLDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOTEBOOKEXPDT_OLDNull()
            Me(Me.tableStatisticPeople.NOTEBOOKEXPDT_OLDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSENTTOPRINTERNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.SENTTOPRINTERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSENTTOPRINTERNull()
            Me(Me.tableStatisticPeople.SENTTOPRINTERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSNull()
            Me(Me.tableStatisticPeople.STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNATIONALITY_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.NATIONALITY_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNATIONALITY_TEXTNull()
            Me(Me.tableStatisticPeople.NATIONALITY_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_COMMUNECITYQUARTER_TEXT_1Null() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_TEXT_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_COMMUNECITYQUARTER_TEXT_1Null()
            Me(Me.tableStatisticPeople.POL_COMMUNECITYQUARTER_TEXT_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_SECTIONCITYDISTRICT_TYPENull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_SECTIONCITYDISTRICT_TYPENull()
            Me(Me.tableStatisticPeople.POL_SECTIONCITYDISTRICT_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRELIGION_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.RELIGION_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRELIGION_TEXTNull()
            Me(Me.tableStatisticPeople.RELIGION_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERSONIDNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.PERSONIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERSONIDNull()
            Me(Me.tableStatisticPeople.PERSONIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHQRECEIVEDDTNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.HQRECEIVEDDTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHQRECEIVEDDTNull()
            Me(Me.tableStatisticPeople.HQRECEIVEDDTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPPLICATIONTYPENull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.APPLICATIONTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPPLICATIONTYPENull()
            Me(Me.tableStatisticPeople.APPLICATIONTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalAgeNull() As Boolean
            Return Me.IsNull(Me.tableStatisticPeople.CalAgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalAgeNull()
            Me(Me.tableStatisticPeople.CalAgeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SelectAllProvinceRow
        Inherits Global.System.Data.DataRow
        
        Private tableSelectAllProvince As SelectAllProvinceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSelectAllProvince = CType(Me.Table,SelectAllProvinceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CountSex() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSelectAllProvince.CountSexColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CountSex' in table 'SelectAllProvince' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectAllProvince.CountSexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GENDER_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectAllProvince.GENDER_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GENDER_TEXT' in table 'SelectAllProvince' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectAllProvince.GENDER_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_CAPITALPROVINCE_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectAllProvince.POL_CAPITALPROVINCE_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_CAPITALPROVINCE_TEXT' in table 'SelectAllProvince' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectAllProvince.POL_CAPITALPROVINCE_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_CAPITALPROVINCE_CODE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSelectAllProvince.POL_CAPITALPROVINCE_CODEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_CAPITALPROVINCE_CODE' in table 'SelectAllProvince' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectAllProvince.POL_CAPITALPROVINCE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalAge() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSelectAllProvince.CalAgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalAge' in table 'SelectAllProvince' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectAllProvince.CalAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountSexNull() As Boolean
            Return Me.IsNull(Me.tableSelectAllProvince.CountSexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountSexNull()
            Me(Me.tableSelectAllProvince.CountSexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGENDER_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableSelectAllProvince.GENDER_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGENDER_TEXTNull()
            Me(Me.tableSelectAllProvince.GENDER_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_CAPITALPROVINCE_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableSelectAllProvince.POL_CAPITALPROVINCE_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_CAPITALPROVINCE_TEXTNull()
            Me(Me.tableSelectAllProvince.POL_CAPITALPROVINCE_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_CAPITALPROVINCE_CODENull() As Boolean
            Return Me.IsNull(Me.tableSelectAllProvince.POL_CAPITALPROVINCE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_CAPITALPROVINCE_CODENull()
            Me(Me.tableSelectAllProvince.POL_CAPITALPROVINCE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalAgeNull() As Boolean
            Return Me.IsNull(Me.tableSelectAllProvince.CalAgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalAgeNull()
            Me(Me.tableSelectAllProvince.CalAgeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ResultKJBRow
        Inherits Global.System.Data.DataRow
        
        Private tableResultKJB As ResultKJBDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableResultKJB = CType(Me.Table,ResultKJBDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AFISID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.AFISIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AFISID' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.AFISIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOCUMENTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.DOCUMENTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOCUMENTNO' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.DOCUMENTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SURNAME_KHMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.SURNAME_KHMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SURNAME_KHMER' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.SURNAME_KHMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GIVENNAME_KHMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.GIVENNAME_KHMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GIVENNAME_KHMER' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.GIVENNAME_KHMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GENDER_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.GENDER_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GENDER_TEXT' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.GENDER_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_CAPITALPROVINCE_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.POL_CAPITALPROVINCE_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_CAPITALPROVINCE_TEXT' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.POL_CAPITALPROVINCE_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_SECTIONCITYDISTRICT_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.POL_SECTIONCITYDISTRICT_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_SECTIONCITYDISTRICT_TEXT' in table 'ResultKJB' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.POL_SECTIONCITYDISTRICT_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_COMMUNECITYQUARTER_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.POL_COMMUNECITYQUARTER_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_COMMUNECITYQUARTER_TEXT' in table 'ResultKJB' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.POL_COMMUNECITYQUARTER_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEOFBIRTH() As Date
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.DATEOFBIRTHColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEOFBIRTH' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.DATEOFBIRTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROW_POSITION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.ROW_POSITIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROW_POSITION' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.ROW_POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrationId() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.RegistrationIdColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegistrationId' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.RegistrationIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.IDNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDNumber' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.IDNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FamilyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.FamilyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FamilyName' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.FamilyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GivenName() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.GivenNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GivenName' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.GivenNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.GenderColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateOfBirthKJB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.DateOfBirthKJBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateOfBirthKJB' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.DateOfBirthKJBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProvinceCode() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.ProvinceCodeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProvinceCode' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.ProvinceCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProvinceKh() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.ProvinceKhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProvinceKh' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.ProvinceKhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommuneCode() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.CommuneCodeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommuneCode' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.CommuneCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommuneKh() As String
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.CommuneKhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommuneKh' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.CommuneKhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATE_SCAN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableResultKJB.DATE_SCANColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_SCAN' in table 'ResultKJB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResultKJB.DATE_SCANColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAFISIDNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.AFISIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAFISIDNull()
            Me(Me.tableResultKJB.AFISIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOCUMENTNONull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.DOCUMENTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOCUMENTNONull()
            Me(Me.tableResultKJB.DOCUMENTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSURNAME_KHMERNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.SURNAME_KHMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSURNAME_KHMERNull()
            Me(Me.tableResultKJB.SURNAME_KHMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGIVENNAME_KHMERNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.GIVENNAME_KHMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGIVENNAME_KHMERNull()
            Me(Me.tableResultKJB.GIVENNAME_KHMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGENDER_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.GENDER_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGENDER_TEXTNull()
            Me(Me.tableResultKJB.GENDER_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_CAPITALPROVINCE_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.POL_CAPITALPROVINCE_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_CAPITALPROVINCE_TEXTNull()
            Me(Me.tableResultKJB.POL_CAPITALPROVINCE_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_SECTIONCITYDISTRICT_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.POL_SECTIONCITYDISTRICT_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_SECTIONCITYDISTRICT_TEXTNull()
            Me(Me.tableResultKJB.POL_SECTIONCITYDISTRICT_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_COMMUNECITYQUARTER_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.POL_COMMUNECITYQUARTER_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_COMMUNECITYQUARTER_TEXTNull()
            Me(Me.tableResultKJB.POL_COMMUNECITYQUARTER_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEOFBIRTHNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.DATEOFBIRTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEOFBIRTHNull()
            Me(Me.tableResultKJB.DATEOFBIRTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROW_POSITIONNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.ROW_POSITIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROW_POSITIONNull()
            Me(Me.tableResultKJB.ROW_POSITIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistrationIdNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.RegistrationIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistrationIdNull()
            Me(Me.tableResultKJB.RegistrationIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNumberNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.IDNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNumberNull()
            Me(Me.tableResultKJB.IDNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamilyNameNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.FamilyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamilyNameNull()
            Me(Me.tableResultKJB.FamilyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGivenNameNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.GivenNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGivenNameNull()
            Me(Me.tableResultKJB.GivenNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableResultKJB.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateOfBirthKJBNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.DateOfBirthKJBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateOfBirthKJBNull()
            Me(Me.tableResultKJB.DateOfBirthKJBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinceCodeNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.ProvinceCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinceCodeNull()
            Me(Me.tableResultKJB.ProvinceCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinceKhNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.ProvinceKhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinceKhNull()
            Me(Me.tableResultKJB.ProvinceKhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommuneCodeNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.CommuneCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommuneCodeNull()
            Me(Me.tableResultKJB.CommuneCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommuneKhNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.CommuneKhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommuneKhNull()
            Me(Me.tableResultKJB.CommuneKhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATE_SCANNull() As Boolean
            Return Me.IsNull(Me.tableResultKJB.DATE_SCANColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATE_SCANNull()
            Me(Me.tableResultKJB.DATE_SCANColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MOI_TEM_RESULTRow
        Inherits Global.System.Data.DataRow
        
        Private tableMOI_TEM_RESULT As MOI_TEM_RESULTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMOI_TEM_RESULT = CType(Me.Table,MOI_TEM_RESULTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AFISID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.AFISIDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AFISID' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.AFISIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOCUMENTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.DOCUMENTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOCUMENTNO' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.DOCUMENTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SURNAME_KHMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.SURNAME_KHMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SURNAME_KHMER' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.SURNAME_KHMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GIVENNAME_KHMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.GIVENNAME_KHMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GIVENNAME_KHMER' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.GIVENNAME_KHMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GENDER_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.GENDER_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GENDER_TEXT' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.GENDER_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_CAPITALPROVINCE_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.POL_CAPITALPROVINCE_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_CAPITALPROVINCE_TEXT' in table 'MOI_TEM_RESULT' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.POL_CAPITALPROVINCE_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_SECTIONCITYDISTRICT_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.POL_SECTIONCITYDISTRICT_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_SECTIONCITYDISTRICT_TEXT' in table 'MOI_TEM_RESULT' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.POL_SECTIONCITYDISTRICT_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL_COMMUNECITYQUARTER_TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.POL_COMMUNECITYQUARTER_TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL_COMMUNECITYQUARTER_TEXT' in table 'MOI_TEM_RESULT' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.POL_COMMUNECITYQUARTER_TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEOFBIRTH() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.DATEOFBIRTHColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEOFBIRTH' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.DATEOFBIRTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROW_POSITION() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.ROW_POSITIONColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROW_POSITION' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.ROW_POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrationId() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.RegistrationIdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegistrationId' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.RegistrationIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.IDNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDNumber' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.IDNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FamilyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.FamilyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FamilyName' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.FamilyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GivenName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.GivenNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GivenName' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.GivenNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.GenderColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateOfBirthKJB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.DateOfBirthKJBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateOfBirthKJB' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.DateOfBirthKJBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProvinceCode() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.ProvinceCodeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProvinceCode' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.ProvinceCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProvinceKh() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.ProvinceKhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProvinceKh' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.ProvinceKhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommuneCode() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.CommuneCodeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommuneCode' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.CommuneCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommuneKh() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.CommuneKhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommuneKh' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.CommuneKhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATE_SCAN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMOI_TEM_RESULT.DATE_SCANColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_SCAN' in table 'MOI_TEM_RESULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOI_TEM_RESULT.DATE_SCANColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAFISIDNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.AFISIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAFISIDNull()
            Me(Me.tableMOI_TEM_RESULT.AFISIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOCUMENTNONull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.DOCUMENTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOCUMENTNONull()
            Me(Me.tableMOI_TEM_RESULT.DOCUMENTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSURNAME_KHMERNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.SURNAME_KHMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSURNAME_KHMERNull()
            Me(Me.tableMOI_TEM_RESULT.SURNAME_KHMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGIVENNAME_KHMERNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.GIVENNAME_KHMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGIVENNAME_KHMERNull()
            Me(Me.tableMOI_TEM_RESULT.GIVENNAME_KHMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGENDER_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.GENDER_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGENDER_TEXTNull()
            Me(Me.tableMOI_TEM_RESULT.GENDER_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_CAPITALPROVINCE_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.POL_CAPITALPROVINCE_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_CAPITALPROVINCE_TEXTNull()
            Me(Me.tableMOI_TEM_RESULT.POL_CAPITALPROVINCE_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_SECTIONCITYDISTRICT_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.POL_SECTIONCITYDISTRICT_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_SECTIONCITYDISTRICT_TEXTNull()
            Me(Me.tableMOI_TEM_RESULT.POL_SECTIONCITYDISTRICT_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOL_COMMUNECITYQUARTER_TEXTNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.POL_COMMUNECITYQUARTER_TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOL_COMMUNECITYQUARTER_TEXTNull()
            Me(Me.tableMOI_TEM_RESULT.POL_COMMUNECITYQUARTER_TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEOFBIRTHNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.DATEOFBIRTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEOFBIRTHNull()
            Me(Me.tableMOI_TEM_RESULT.DATEOFBIRTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROW_POSITIONNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.ROW_POSITIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROW_POSITIONNull()
            Me(Me.tableMOI_TEM_RESULT.ROW_POSITIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistrationIdNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.RegistrationIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistrationIdNull()
            Me(Me.tableMOI_TEM_RESULT.RegistrationIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNumberNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.IDNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNumberNull()
            Me(Me.tableMOI_TEM_RESULT.IDNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamilyNameNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.FamilyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamilyNameNull()
            Me(Me.tableMOI_TEM_RESULT.FamilyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGivenNameNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.GivenNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGivenNameNull()
            Me(Me.tableMOI_TEM_RESULT.GivenNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableMOI_TEM_RESULT.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateOfBirthKJBNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.DateOfBirthKJBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateOfBirthKJBNull()
            Me(Me.tableMOI_TEM_RESULT.DateOfBirthKJBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinceCodeNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.ProvinceCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinceCodeNull()
            Me(Me.tableMOI_TEM_RESULT.ProvinceCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinceKhNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.ProvinceKhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinceKhNull()
            Me(Me.tableMOI_TEM_RESULT.ProvinceKhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommuneCodeNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.CommuneCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommuneCodeNull()
            Me(Me.tableMOI_TEM_RESULT.CommuneCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommuneKhNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.CommuneKhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommuneKhNull()
            Me(Me.tableMOI_TEM_RESULT.CommuneKhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATE_SCANNull() As Boolean
            Return Me.IsNull(Me.tableMOI_TEM_RESULT.DATE_SCANColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATE_SCANNull()
            Me(Me.tableMOI_TEM_RESULT.DATE_SCANColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TBL_PROVINCERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TBL_PROVINCERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TBL_PROVINCERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TBL_PROVINCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TBL_DISTRICTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TBL_DISTRICTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TBL_DISTRICTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TBL_DISTRICTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TBL_COMMUNERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TBL_COMMUNERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TBL_COMMUNERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TBL_COMMUNERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TBL_VILLAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TBL_VILLAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TBL_VILLAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TBL_VILLAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_PEOPLE_VERIFICATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_PEOPLE_VERIFICATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_PEOPLE_VERIFICATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_PEOPLE_VERIFICATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tbl_verificationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbl_verificationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tbl_verificationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tbl_verificationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TblFormVerifyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TblFormVerifyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TblFormVerifyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TblFormVerifyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StatisticPeopleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StatisticPeopleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StatisticPeopleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StatisticPeopleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SelectAllProvinceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SelectAllProvinceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SelectAllProvinceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SelectAllProvinceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ResultKJBRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ResultKJBRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ResultKJBRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ResultKJBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MOI_TEM_RESULTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MOI_TEM_RESULTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MOI_TEM_RESULTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MOI_TEM_RESULTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSIDVerificationTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TBL_PROVINCETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TBL_PROVINCE"
            tableMapping.ColumnMappings.Add("PROVINCEID", "PROVINCEID")
            tableMapping.ColumnMappings.Add("PROV_EN", "PROV_EN")
            tableMapping.ColumnMappings.Add("PROV_KH", "PROV_KH")
            tableMapping.ColumnMappings.Add("VALIDFROM", "VALIDFROM")
            tableMapping.ColumnMappings.Add("VALIDTO", "VALIDTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TBL_PROVINCE] ([PROVINCEID], [PROV_EN], [PROV_KH], [VALIDFROM], [VAL"& _ 
                "IDTO]) VALUES (@PROVINCEID, @PROV_EN, @PROV_KH, @VALIDFROM, @VALIDTO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCEID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROV_EN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROV_EN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROV_KH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROV_KH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALIDFROM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALIDFROM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALIDTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALIDTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.IDCardVerificationPrint.My.MySettings.Default.DBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PROVINCEID, PROV_EN, PROV_KH, VALIDFROM, VALIDTO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            T"& _ 
                "BL_PROVINCE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSIDVerification.TBL_PROVINCEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSIDVerification.TBL_PROVINCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSIDVerification.TBL_PROVINCEDataTable = New DSIDVerification.TBL_PROVINCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSIDVerification.TBL_PROVINCEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSIDVerification) As Integer
            Return Me.Adapter.Update(dataSet, "TBL_PROVINCE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROVINCEID As Global.System.Nullable(Of Integer), ByVal PROV_EN As String, ByVal PROV_KH As String, ByVal VALIDFROM As String, ByVal VALIDTO As String) As Integer
            If (PROVINCEID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROVINCEID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PROV_EN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROV_EN,String)
            End If
            If (PROV_KH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PROV_KH,String)
            End If
            If (VALIDFROM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(VALIDFROM,String)
            End If
            If (VALIDTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(VALIDTO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TBL_DISTRICTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TBL_DISTRICT"
            tableMapping.ColumnMappings.Add("DISTRICTID", "DISTRICTID")
            tableMapping.ColumnMappings.Add("DIST_EN", "DIST_EN")
            tableMapping.ColumnMappings.Add("DIST_KH", "DIST_KH")
            tableMapping.ColumnMappings.Add("DIST_TYPE", "DIST_TYPE")
            tableMapping.ColumnMappings.Add("PROVINCEID", "PROVINCEID")
            tableMapping.ColumnMappings.Add("VALIDFROM", "VALIDFROM")
            tableMapping.ColumnMappings.Add("VALIDTO", "VALIDTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TBL_DISTRICT] ([DISTRICTID], [DIST_EN], [DIST_KH], [DIST_TYPE], [PRO"& _ 
                "VINCEID], [VALIDFROM], [VALIDTO]) VALUES (@DISTRICTID, @DIST_EN, @DIST_KH, @DIST"& _ 
                "_TYPE, @PROVINCEID, @VALIDFROM, @VALIDTO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTRICTID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTRICTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIST_EN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIST_EN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIST_KH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIST_KH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIST_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIST_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCEID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALIDFROM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALIDFROM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALIDTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALIDTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.IDCardVerificationPrint.My.MySettings.Default.DBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        DISTRICTID, DIST_EN, DIST_KH, DIST_TYPE, PROVINCEID, VALIDFROM, VAL"& _ 
                "IDTO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TBL_DISTRICT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        DISTRICTID, DIST_EN, DIST_KH, DIST_TYPE, PROVINCEID, VALIDFROM, VAL"& _ 
                "IDTO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TBL_DISTRICT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE PROVINCEID=@PROVINCEID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROVINCEID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROVINCEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSIDVerification.TBL_DISTRICTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSIDVerification.TBL_DISTRICTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSIDVerification.TBL_DISTRICTDataTable = New DSIDVerification.TBL_DISTRICTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSIDVerification.TBL_DISTRICTDataTable, ByVal PROVINCEID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PROVINCEID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROVINCEID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByProvinceID(ByVal PROVINCEID As Global.System.Nullable(Of Integer)) As DSIDVerification.TBL_DISTRICTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PROVINCEID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROVINCEID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSIDVerification.TBL_DISTRICTDataTable = New DSIDVerification.TBL_DISTRICTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSIDVerification.TBL_DISTRICTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSIDVerification) As Integer
            Return Me.Adapter.Update(dataSet, "TBL_DISTRICT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DISTRICTID As Global.System.Nullable(Of Integer), ByVal DIST_EN As String, ByVal DIST_KH As String, ByVal DIST_TYPE As String, ByVal PROVINCEID As Global.System.Nullable(Of Integer), ByVal VALIDFROM As String, ByVal VALIDTO As String) As Integer
            If (DISTRICTID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DISTRICTID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DIST_EN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DIST_EN,String)
            End If
            If (DIST_KH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DIST_KH,String)
            End If
            If (DIST_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DIST_TYPE,String)
            End If
            If (PROVINCEID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PROVINCEID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (VALIDFROM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(VALIDFROM,String)
            End If
            If (VALIDTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(VALIDTO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TBL_COMMUNETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TBL_COMMUNE"
            tableMapping.ColumnMappings.Add("COMMUNEID", "COMMUNEID")
            tableMapping.ColumnMappings.Add("COMM_EN", "COMM_EN")
            tableMapping.ColumnMappings.Add("COMM_KH", "COMM_KH")
            tableMapping.ColumnMappings.Add("COMM_TYPE", "COMM_TYPE")
            tableMapping.ColumnMappings.Add("DISTRICTID", "DISTRICTID")
            tableMapping.ColumnMappings.Add("VALIDFROM", "VALIDFROM")
            tableMapping.ColumnMappings.Add("VALIDTO", "VALIDTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TBL_COMMUNE] ([COMMUNEID], [COMM_EN], [COMM_KH], [COMM_TYPE], [DISTR"& _ 
                "ICTID], [VALIDFROM], [VALIDTO]) VALUES (@COMMUNEID, @COMM_EN, @COMM_KH, @COMM_TY"& _ 
                "PE, @DISTRICTID, @VALIDFROM, @VALIDTO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMUNEID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMUNEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMM_EN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMM_EN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMM_KH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMM_KH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMM_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMM_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTRICTID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTRICTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALIDFROM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALIDFROM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALIDTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALIDTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.IDCardVerificationPrint.My.MySettings.Default.DBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        COMMUNEID, COMM_EN, COMM_KH, COMM_TYPE, DISTRICTID, VALIDFROM, VALI"& _ 
                "DTO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TBL_COMMUNE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        COMMUNEID, COMM_EN, COMM_KH, COMM_TYPE, DISTRICTID, VALIDFROM, VALI"& _ 
                "DTO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TBL_COMMUNE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"DISTRICTID =@DISTRICTID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTRICTID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTRICTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSIDVerification.TBL_COMMUNEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSIDVerification.TBL_COMMUNEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSIDVerification.TBL_COMMUNEDataTable = New DSIDVerification.TBL_COMMUNEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSIDVerification.TBL_COMMUNEDataTable, ByVal DISTRICTID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DISTRICTID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DISTRICTID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByDISTRICTID(ByVal DISTRICTID As Global.System.Nullable(Of Integer)) As DSIDVerification.TBL_COMMUNEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DISTRICTID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DISTRICTID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSIDVerification.TBL_COMMUNEDataTable = New DSIDVerification.TBL_COMMUNEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSIDVerification.TBL_COMMUNEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSIDVerification) As Integer
            Return Me.Adapter.Update(dataSet, "TBL_COMMUNE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COMMUNEID As Global.System.Nullable(Of Integer), ByVal COMM_EN As String, ByVal COMM_KH As String, ByVal COMM_TYPE As String, ByVal DISTRICTID As Global.System.Nullable(Of Integer), ByVal VALIDFROM As String, ByVal VALIDTO As String) As Integer
            If (COMMUNEID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(COMMUNEID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (COMM_EN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(COMM_EN,String)
            End If
            If (COMM_KH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COMM_KH,String)
            End If
            If (COMM_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COMM_TYPE,String)
            End If
            If (DISTRICTID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DISTRICTID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (VALIDFROM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(VALIDFROM,String)
            End If
            If (VALIDTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(VALIDTO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TBL_VILLAGETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TBL_VILLAGE"
            tableMapping.ColumnMappings.Add("VILLAGEID", "VILLAGEID")
            tableMapping.ColumnMappings.Add("VILL_EN", "VILL_EN")
            tableMapping.ColumnMappings.Add("VILL_KH", "VILL_KH")
            tableMapping.ColumnMappings.Add("VILL_TYPE", "VILL_TYPE")
            tableMapping.ColumnMappings.Add("COMMUNEID", "COMMUNEID")
            tableMapping.ColumnMappings.Add("VALIDFROM", "VALIDFROM")
            tableMapping.ColumnMappings.Add("VALIDTO", "VALIDTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TBL_VILLAGE] ([VILLAGEID], [VILL_EN], [VILL_KH], [VILL_TYPE], [COMMU"& _ 
                "NEID], [VALIDFROM], [VALIDTO]) VALUES (@VILLAGEID, @VILL_EN, @VILL_KH, @VILL_TYP"& _ 
                "E, @COMMUNEID, @VALIDFROM, @VALIDTO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VILLAGEID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VILLAGEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VILL_EN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VILL_EN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VILL_KH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VILL_KH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VILL_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VILL_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMUNEID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMUNEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALIDFROM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALIDFROM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VALIDTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VALIDTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.IDCardVerificationPrint.My.MySettings.Default.DBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        VILLAGEID, VILL_EN, VILL_KH, VILL_TYPE, COMMUNEID, VALIDFROM, VALID"& _ 
                "TO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TBL_VILLAGE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        VILLAGEID, VILL_EN, VILL_KH, VILL_TYPE, COMMUNEID, VALIDFROM, VALID"& _ 
                "TO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TBL_VILLAGE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"COMMUNEID=@COMMUNEID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMUNEID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMUNEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSIDVerification.TBL_VILLAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSIDVerification.TBL_VILLAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSIDVerification.TBL_VILLAGEDataTable = New DSIDVerification.TBL_VILLAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSIDVerification.TBL_VILLAGEDataTable, ByVal COMMUNEID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COMMUNEID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COMMUNEID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByCOMMUNEID(ByVal COMMUNEID As Global.System.Nullable(Of Integer)) As DSIDVerification.TBL_VILLAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COMMUNEID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COMMUNEID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSIDVerification.TBL_VILLAGEDataTable = New DSIDVerification.TBL_VILLAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSIDVerification.TBL_VILLAGEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSIDVerification) As Integer
            Return Me.Adapter.Update(dataSet, "TBL_VILLAGE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal VILLAGEID As Global.System.Nullable(Of Integer), ByVal VILL_EN As String, ByVal VILL_KH As String, ByVal VILL_TYPE As String, ByVal COMMUNEID As Global.System.Nullable(Of Integer), ByVal VALIDFROM As String, ByVal VALIDTO As String) As Integer
            If (VILLAGEID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(VILLAGEID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (VILL_EN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(VILL_EN,String)
            End If
            If (VILL_KH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(VILL_KH,String)
            End If
            If (VILL_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(VILL_TYPE,String)
            End If
            If (COMMUNEID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COMMUNEID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (VALIDFROM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(VALIDFROM,String)
            End If
            If (VALIDTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(VALIDTO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VIEW_PEOPLE_VERIFICATIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VIEW_PEOPLE_VERIFICATION"
            tableMapping.ColumnMappings.Add("documentno", "documentno")
            tableMapping.ColumnMappings.Add("barcodeno", "barcodeno")
            tableMapping.ColumnMappings.Add("surname_khmer", "surname_khmer")
            tableMapping.ColumnMappings.Add("givenname_khmer", "givenname_khmer")
            tableMapping.ColumnMappings.Add("KhmerName", "KhmerName")
            tableMapping.ColumnMappings.Add("surname_latin", "surname_latin")
            tableMapping.ColumnMappings.Add("givenname_latin", "givenname_latin")
            tableMapping.ColumnMappings.Add("LatinName", "LatinName")
            tableMapping.ColumnMappings.Add("sex", "sex")
            tableMapping.ColumnMappings.Add("dateofbirth", "dateofbirth")
            tableMapping.ColumnMappings.Add("date_of_registration", "date_of_registration")
            tableMapping.ColumnMappings.Add("pobvillage", "pobvillage")
            tableMapping.ColumnMappings.Add("pobcommune", "pobcommune")
            tableMapping.ColumnMappings.Add("pobdistrict", "pobdistrict")
            tableMapping.ColumnMappings.Add("pobprovince", "pobprovince")
            tableMapping.ColumnMappings.Add("OldDress", "OldDress")
            tableMapping.ColumnMappings.Add("polvillage", "polvillage")
            tableMapping.ColumnMappings.Add("polcommune", "polcommune")
            tableMapping.ColumnMappings.Add("poldistrict", "poldistrict")
            tableMapping.ColumnMappings.Add("polprovince", "polprovince")
            tableMapping.ColumnMappings.Add("CurrentAddress", "CurrentAddress")
            tableMapping.ColumnMappings.Add("reason", "reason")
            tableMapping.ColumnMappings.Add("photo", "photo")
            tableMapping.ColumnMappings.Add("other", "other")
            tableMapping.ColumnMappings.Add("registrationform", "registrationform")
            tableMapping.ColumnMappings.Add("VerBarcode", "VerBarcode")
            tableMapping.ColumnMappings.Add("VerSurnameKhmer", "VerSurnameKhmer")
            tableMapping.ColumnMappings.Add("VerGiveNamekhmer", "VerGiveNamekhmer")
            tableMapping.ColumnMappings.Add("VerSurnameLatin", "VerSurnameLatin")
            tableMapping.ColumnMappings.Add("VerGiveNameLatin", "VerGiveNameLatin")
            tableMapping.ColumnMappings.Add("VerSex", "VerSex")
            tableMapping.ColumnMappings.Add("VerDateOfBirth", "VerDateOfBirth")
            tableMapping.ColumnMappings.Add("VerDateOfRegistration", "VerDateOfRegistration")
            tableMapping.ColumnMappings.Add("VerPobVillage", "VerPobVillage")
            tableMapping.ColumnMappings.Add("VerPobCommune", "VerPobCommune")
            tableMapping.ColumnMappings.Add("VerDistrict", "VerDistrict")
            tableMapping.ColumnMappings.Add("VerPobProvince", "VerPobProvince")
            tableMapping.ColumnMappings.Add("VerPolVillage", "VerPolVillage")
            tableMapping.ColumnMappings.Add("VerPolCommune", "VerPolCommune")
            tableMapping.ColumnMappings.Add("VerPolDistrict", "VerPolDistrict")
            tableMapping.ColumnMappings.Add("VerPolProvince", "VerPolProvince")
            tableMapping.ColumnMappings.Add("VerReason", "VerReason")
            tableMapping.ColumnMappings.Add("VerPhoto", "VerPhoto")
            tableMapping.ColumnMappings.Add("VerOther", "VerOther")
            tableMapping.ColumnMappings.Add("VerRegistrationform", "VerRegistrationform")
            tableMapping.ColumnMappings.Add("afisid", "afisid")
            tableMapping.ColumnMappings.Add("Printed", "Printed")
            tableMapping.ColumnMappings.Add("Verification", "Verification")
            tableMapping.ColumnMappings.Add("PrintDate", "PrintDate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.IDCardVerificationPrint.My.MySettings.Default.DBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        documentno, barcodeno, surname_khmer, givenname_khmer, KhmerName, s"& _ 
                "urname_latin, givenname_latin, LatinName, sex, dateofbirth, date_of_registration"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pobvillage, pobcommune, pobdistrict, pobprovince, O"& _ 
                "ldDress, polvillage, polcommune, poldistrict, polprovince, CurrentAddress, reaso"& _ 
                "n, photo, other, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         registrationform, VerBarcode, VerSur"& _ 
                "nameKhmer, VerGiveNamekhmer, VerSurnameLatin, VerGiveNameLatin, VerSex, VerDateO"& _ 
                "fBirth, VerDateOfRegistration, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         VerPobVillage, VerPobC"& _ 
                "ommune, VerDistrict, VerPobProvince, VerPolVillage, VerPolCommune, VerPolDistric"& _ 
                "t, VerPolProvince, VerReason, VerPhoto, VerOther, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Ver"& _ 
                "Registrationform, afisid, Printed, Verification, PrintDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VIEW"& _ 
                "_PEOPLE_VERIFICATION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CurrentAddress, KhmerName, LatinName, OldDress, PrintDate, Printed, VerBar"& _ 
                "code, VerDateOfBirth, VerDateOfRegistration, VerDistrict, VerGiveNameLatin, VerG"& _ 
                "iveNamekhmer, VerOther, VerPhoto, VerPobCommune, VerPobProvince, VerPobVillage, "& _ 
                "VerPolCommune, VerPolDistrict, VerPolProvince, VerPolVillage, VerReason, VerRegi"& _ 
                "strationform, VerSex, VerSurnameKhmer, VerSurnameLatin, Verification, afisid, ba"& _ 
                "rcodeno, date_of_registration, dateofbirth, documentno, givenname_khmer, givenna"& _ 
                "me_latin, other, photo, pobcommune, pobdistrict, pobprovince, pobvillage, polcom"& _ 
                "mune, poldistrict, polprovince, polvillage, reason, registrationform, sex, surna"& _ 
                "me_khmer, surname_latin FROM VIEW_PEOPLE_VERIFICATION WHERE (afisid = @afisid)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@afisid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "afisid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CurrentAddress, KhmerName, LatinName, OldDress, PrintDate, Printed, VerBar"& _ 
                "code, VerDateOfBirth, VerDateOfRegistration, VerDistrict, VerGiveNameLatin, VerG"& _ 
                "iveNamekhmer, VerOther, VerPhoto, VerPobCommune, VerPobProvince, VerPobVillage, "& _ 
                "VerPolCommune, VerPolDistrict, VerPolProvince, VerPolVillage, VerReason, VerRegi"& _ 
                "strationform, VerSex, VerSurnameKhmer, VerSurnameLatin, Verification, afisid, ba"& _ 
                "rcodeno, date_of_registration, dateofbirth, documentno, givenname_khmer, givenna"& _ 
                "me_latin, other, photo, pobcommune, pobdistrict, pobprovince, pobvillage, polcom"& _ 
                "mune, poldistrict, polprovince, polvillage, reason, registrationform, sex, surna"& _ 
                "me_khmer, surname_latin FROM VIEW_PEOPLE_VERIFICATION WHERE (UPPER(KhmerName) LI"& _ 
                "KE N'%' + @KhmerName + '%')"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KhmerName", Global.System.Data.SqlDbType.NVarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT CurrentAddress, KhmerName, LatinName, OldDress, PrintDate, Printed, VerBar"& _ 
                "code, VerDateOfBirth, VerDateOfRegistration, VerDistrict, VerGiveNameLatin, VerG"& _ 
                "iveNamekhmer, VerOther, VerPhoto, VerPobCommune, VerPobProvince, VerPobVillage, "& _ 
                "VerPolCommune, VerPolDistrict, VerPolProvince, VerPolVillage, VerReason, VerRegi"& _ 
                "strationform, VerSex, VerSurnameKhmer, VerSurnameLatin, Verification, afisid, ba"& _ 
                "rcodeno, date_of_registration, dateofbirth, documentno, givenname_khmer, givenna"& _ 
                "me_latin, other, photo, pobcommune, pobdistrict, pobprovince, pobvillage, polcom"& _ 
                "mune, poldistrict, polprovince, polvillage, reason, registrationform, sex, surna"& _ 
                "me_khmer, surname_latin FROM VIEW_PEOPLE_VERIFICATION WHERE (UPPER(LatinName) LI"& _ 
                "KE UPPER('%' + @LatinName + '%'))"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LatinName", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT CurrentAddress, KhmerName, LatinName, OldDress, PrintDate, Printed, VerBar"& _ 
                "code, VerDateOfBirth, VerDateOfRegistration, VerDistrict, VerGiveNameLatin, VerG"& _ 
                "iveNamekhmer, VerOther, VerPhoto, VerPobCommune, VerPobProvince, VerPobVillage, "& _ 
                "VerPolCommune, VerPolDistrict, VerPolProvince, VerPolVillage, VerReason, VerRegi"& _ 
                "strationform, VerSex, VerSurnameKhmer, VerSurnameLatin, Verification, afisid, ba"& _ 
                "rcodeno, date_of_registration, dateofbirth, documentno, givenname_khmer, givenna"& _ 
                "me_latin, other, photo, pobcommune, pobdistrict, pobprovince, pobvillage, polcom"& _ 
                "mune, poldistrict, polprovince, polvillage, reason, registrationform, sex, surna"& _ 
                "me_khmer, surname_latin FROM VIEW_PEOPLE_VERIFICATION WHERE (polprovince = N'' +"& _ 
                " @polprovince)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@polprovince", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "polprovince", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT CurrentAddress, KhmerName, LatinName, OldDress, PrintDate, Printed, VerBar"& _ 
                "code, VerDateOfBirth, VerDateOfRegistration, VerDistrict, VerGiveNameLatin, VerG"& _ 
                "iveNamekhmer, VerOther, VerPhoto, VerPobCommune, VerPobProvince, VerPobVillage, "& _ 
                "VerPolCommune, VerPolDistrict, VerPolProvince, VerPolVillage, VerReason, VerRegi"& _ 
                "strationform, VerSex, VerSurnameKhmer, VerSurnameLatin, Verification, afisid, ba"& _ 
                "rcodeno, date_of_registration, dateofbirth, documentno, givenname_khmer, givenna"& _ 
                "me_latin, other, photo, pobcommune, pobdistrict, pobprovince, pobvillage, polcom"& _ 
                "mune, poldistrict, polprovince, polvillage, reason, registrationform, sex, surna"& _ 
                "me_khmer, surname_latin FROM VIEW_PEOPLE_VERIFICATION WHERE (poldistrict = @pold"& _ 
                "istrict)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@poldistrict", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "poldistrict", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable = New DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable, ByVal afisid As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(afisid,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByIDNo(ByVal afisid As Integer) As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(afisid,Integer)
            Dim dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable = New DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable, ByVal KhmerName As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (KhmerName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KhmerName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(KhmerName,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByKhmerName(ByVal KhmerName As String) As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (KhmerName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KhmerName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(KhmerName,String)
            End If
            Dim dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable = New DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable, ByVal LatinName As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (LatinName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LatinName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LatinName,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByLatinName(ByVal LatinName As String) As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (LatinName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LatinName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LatinName,String)
            End If
            Dim dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable = New DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy3(ByVal dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable, ByVal polprovince As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (polprovince Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(polprovince,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByProvince(ByVal polprovince As String) As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (polprovince Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(polprovince,String)
            End If
            Dim dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable = New DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy4(ByVal dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable, ByVal poldistrict As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (poldistrict Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(poldistrict,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal poldistrict As String) As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (poldistrict Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(poldistrict,String)
            End If
            Dim dataTable As DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable = New DSIDVerification.VIEW_PEOPLE_VERIFICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbl_verificationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbl_verification"
            tableMapping.ColumnMappings.Add("afisid", "afisid")
            tableMapping.ColumnMappings.Add("old_id", "old_id")
            tableMapping.ColumnMappings.Add("surname_khmer", "surname_khmer")
            tableMapping.ColumnMappings.Add("barcodeno", "barcodeno")
            tableMapping.ColumnMappings.Add("givenname_khmer", "givenname_khmer")
            tableMapping.ColumnMappings.Add("surname_latin", "surname_latin")
            tableMapping.ColumnMappings.Add("givenname_latin", "givenname_latin")
            tableMapping.ColumnMappings.Add("sex", "sex")
            tableMapping.ColumnMappings.Add("dateofbirth", "dateofbirth")
            tableMapping.ColumnMappings.Add("date_of_registration", "date_of_registration")
            tableMapping.ColumnMappings.Add("pobvillage", "pobvillage")
            tableMapping.ColumnMappings.Add("pobcommune", "pobcommune")
            tableMapping.ColumnMappings.Add("pobdistrict", "pobdistrict")
            tableMapping.ColumnMappings.Add("pobprovince", "pobprovince")
            tableMapping.ColumnMappings.Add("polvillage", "polvillage")
            tableMapping.ColumnMappings.Add("polcommune", "polcommune")
            tableMapping.ColumnMappings.Add("poldistrict", "poldistrict")
            tableMapping.ColumnMappings.Add("polprovince", "polprovince")
            tableMapping.ColumnMappings.Add("reason", "reason")
            tableMapping.ColumnMappings.Add("photo", "photo")
            tableMapping.ColumnMappings.Add("other", "other")
            tableMapping.ColumnMappings.Add("registrationform", "registrationform")
            tableMapping.ColumnMappings.Add("Printed", "Printed")
            tableMapping.ColumnMappings.Add("Verification", "Verification")
            tableMapping.ColumnMappings.Add("PrintDate", "PrintDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tbl_verification] ([afisid], [old_id], [surname_khmer], [barcodeno],"& _ 
                " [givenname_khmer], [surname_latin], [givenname_latin], [sex], [dateofbirth], [d"& _ 
                "ate_of_registration], [pobvillage], [pobcommune], [pobdistrict], [pobprovince], "& _ 
                "[polvillage], [polcommune], [poldistrict], [polprovince], [reason], [photo], [ot"& _ 
                "her], [registrationform], [Printed], [Verification], [PrintDate]) VALUES (@afisi"& _ 
                "d, @old_id, @surname_khmer, @barcodeno, @givenname_khmer, @surname_latin, @given"& _ 
                "name_latin, @sex, @dateofbirth, @date_of_registration, @pobvillage, @pobcommune,"& _ 
                " @pobdistrict, @pobprovince, @polvillage, @polcommune, @poldistrict, @polprovinc"& _ 
                "e, @reason, @photo, @other, @registrationform, @Printed, @Verification, @PrintDa"& _ 
                "te)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@afisid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "afisid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@old_id", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "old_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@surname_khmer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "surname_khmer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@barcodeno", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "barcodeno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@givenname_khmer", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "givenname_khmer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@surname_latin", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "surname_latin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@givenname_latin", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "givenname_latin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sex", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sex", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateofbirth", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateofbirth", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date_of_registration", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date_of_registration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pobvillage", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pobvillage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pobcommune", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pobcommune", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pobdistrict", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pobdistrict", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pobprovince", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pobprovince", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@polvillage", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "polvillage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@polcommune", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "polcommune", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@poldistrict", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "poldistrict", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@polprovince", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "polprovince", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@reason", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "reason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@photo", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "photo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@other", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "other", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@registrationform", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "registrationform", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Printed", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Printed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Verification", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Verification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrintDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrintDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.IDCardVerificationPrint.My.MySettings.Default.DBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        afisid, old_id, surname_khmer, barcodeno, givenname_khmer, surname_"& _ 
                "latin, givenname_latin, sex, dateofbirth, date_of_registration, pobvillage, pobc"& _ 
                "ommune, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pobdistrict, pobprovince, polvillage, polcomm"& _ 
                "une, poldistrict, polprovince, reason, photo, other, registrationform, Printed, "& _ 
                "Verification, PrintDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tbl_verification"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE       tbl_verification"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Printed = '1', Verification = @"& _ 
                "Verification, PrintDate = @PrintDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (afisid = @afisid)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Verification", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "Verification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrintDate", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "PrintDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@afisid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "afisid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSIDVerification.tbl_verificationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSIDVerification.tbl_verificationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSIDVerification.tbl_verificationDataTable = New DSIDVerification.tbl_verificationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSIDVerification.tbl_verificationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSIDVerification) As Integer
            Return Me.Adapter.Update(dataSet, "tbl_verification")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal afisid As Integer,  _
                    ByVal old_id As String,  _
                    ByVal surname_khmer As String,  _
                    ByVal barcodeno As String,  _
                    ByVal givenname_khmer As String,  _
                    ByVal surname_latin As String,  _
                    ByVal givenname_latin As String,  _
                    ByVal sex As String,  _
                    ByVal dateofbirth As Global.System.Nullable(Of Date),  _
                    ByVal date_of_registration As Global.System.Nullable(Of Date),  _
                    ByVal pobvillage As String,  _
                    ByVal pobcommune As String,  _
                    ByVal pobdistrict As String,  _
                    ByVal pobprovince As String,  _
                    ByVal polvillage As String,  _
                    ByVal polcommune As String,  _
                    ByVal poldistrict As String,  _
                    ByVal polprovince As String,  _
                    ByVal reason As String,  _
                    ByVal photo() As Byte,  _
                    ByVal other As String,  _
                    ByVal registrationform() As Byte,  _
                    ByVal Printed As String,  _
                    ByVal Verification As String,  _
                    ByVal PrintDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(afisid,Integer)
            If (old_id Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(old_id,String)
            End If
            If (surname_khmer Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(surname_khmer,String)
            End If
            If (barcodeno Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(barcodeno,String)
            End If
            If (givenname_khmer Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(givenname_khmer,String)
            End If
            If (surname_latin Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(surname_latin,String)
            End If
            If (givenname_latin Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(givenname_latin,String)
            End If
            If (sex Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(sex,String)
            End If
            If (dateofbirth.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(dateofbirth.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (date_of_registration.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(date_of_registration.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (pobvillage Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(pobvillage,String)
            End If
            If (pobcommune Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(pobcommune,String)
            End If
            If (pobdistrict Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(pobdistrict,String)
            End If
            If (pobprovince Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(pobprovince,String)
            End If
            If (polvillage Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(polvillage,String)
            End If
            If (polcommune Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(polcommune,String)
            End If
            If (poldistrict Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(poldistrict,String)
            End If
            If (polprovince Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(polprovince,String)
            End If
            If (reason Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(reason,String)
            End If
            If (photo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(photo,Byte())
            End If
            If (other Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(other,String)
            End If
            If (registrationform Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(registrationform,Byte())
            End If
            If (Printed Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Printed,String)
            End If
            If (Verification Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Verification,String)
            End If
            If (PrintDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(PrintDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdatePrinted(ByVal Verification As String, ByVal PrintDate As String, ByVal afisid As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (Verification Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Verification,String)
            End If
            If (PrintDate Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(PrintDate,String)
            End If
            command.Parameters(2).Value = CType(afisid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _tBL_PROVINCETableAdapter As TBL_PROVINCETableAdapter
        
        Private _tBL_DISTRICTTableAdapter As TBL_DISTRICTTableAdapter
        
        Private _tBL_COMMUNETableAdapter As TBL_COMMUNETableAdapter
        
        Private _tBL_VILLAGETableAdapter As TBL_VILLAGETableAdapter
        
        Private _tbl_verificationTableAdapter As tbl_verificationTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TBL_PROVINCETableAdapter() As TBL_PROVINCETableAdapter
            Get
                Return Me._tBL_PROVINCETableAdapter
            End Get
            Set
                Me._tBL_PROVINCETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TBL_DISTRICTTableAdapter() As TBL_DISTRICTTableAdapter
            Get
                Return Me._tBL_DISTRICTTableAdapter
            End Get
            Set
                Me._tBL_DISTRICTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TBL_COMMUNETableAdapter() As TBL_COMMUNETableAdapter
            Get
                Return Me._tBL_COMMUNETableAdapter
            End Get
            Set
                Me._tBL_COMMUNETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TBL_VILLAGETableAdapter() As TBL_VILLAGETableAdapter
            Get
                Return Me._tBL_VILLAGETableAdapter
            End Get
            Set
                Me._tBL_VILLAGETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbl_verificationTableAdapter() As tbl_verificationTableAdapter
            Get
                Return Me._tbl_verificationTableAdapter
            End Get
            Set
                Me._tbl_verificationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._tBL_PROVINCETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tBL_PROVINCETableAdapter.Connection) Is Nothing)) Then
                    Return Me._tBL_PROVINCETableAdapter.Connection
                End If
                If ((Not (Me._tBL_DISTRICTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tBL_DISTRICTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tBL_DISTRICTTableAdapter.Connection
                End If
                If ((Not (Me._tBL_COMMUNETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tBL_COMMUNETableAdapter.Connection) Is Nothing)) Then
                    Return Me._tBL_COMMUNETableAdapter.Connection
                End If
                If ((Not (Me._tBL_VILLAGETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tBL_VILLAGETableAdapter.Connection) Is Nothing)) Then
                    Return Me._tBL_VILLAGETableAdapter.Connection
                End If
                If ((Not (Me._tbl_verificationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbl_verificationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbl_verificationTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._tBL_PROVINCETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tBL_DISTRICTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tBL_COMMUNETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tBL_VILLAGETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbl_verificationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSIDVerification, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tbl_verificationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbl_verification.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbl_verificationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tBL_DISTRICTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TBL_DISTRICT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tBL_DISTRICTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tBL_PROVINCETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TBL_PROVINCE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tBL_PROVINCETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tBL_COMMUNETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TBL_COMMUNE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tBL_COMMUNETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tBL_VILLAGETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TBL_VILLAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tBL_VILLAGETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSIDVerification, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tbl_verificationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbl_verification.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbl_verificationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tBL_DISTRICTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TBL_DISTRICT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tBL_DISTRICTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tBL_PROVINCETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TBL_PROVINCE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tBL_PROVINCETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tBL_COMMUNETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TBL_COMMUNE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tBL_COMMUNETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tBL_VILLAGETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TBL_VILLAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tBL_VILLAGETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSIDVerification, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tBL_VILLAGETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TBL_VILLAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tBL_VILLAGETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tBL_COMMUNETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TBL_COMMUNE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tBL_COMMUNETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tBL_PROVINCETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TBL_PROVINCE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tBL_PROVINCETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tBL_DISTRICTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TBL_DISTRICT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tBL_DISTRICTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbl_verificationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbl_verification.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbl_verificationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSIDVerification) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._tBL_PROVINCETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tBL_PROVINCETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tBL_DISTRICTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tBL_DISTRICTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tBL_COMMUNETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tBL_COMMUNETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tBL_VILLAGETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tBL_VILLAGETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbl_verificationTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbl_verificationTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._tBL_PROVINCETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tBL_PROVINCETableAdapter, Me._tBL_PROVINCETableAdapter.Connection)
                    Me._tBL_PROVINCETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tBL_PROVINCETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tBL_PROVINCETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tBL_PROVINCETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tBL_PROVINCETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tBL_DISTRICTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tBL_DISTRICTTableAdapter, Me._tBL_DISTRICTTableAdapter.Connection)
                    Me._tBL_DISTRICTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tBL_DISTRICTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tBL_DISTRICTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tBL_DISTRICTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tBL_DISTRICTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tBL_COMMUNETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tBL_COMMUNETableAdapter, Me._tBL_COMMUNETableAdapter.Connection)
                    Me._tBL_COMMUNETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tBL_COMMUNETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tBL_COMMUNETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tBL_COMMUNETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tBL_COMMUNETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tBL_VILLAGETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tBL_VILLAGETableAdapter, Me._tBL_VILLAGETableAdapter.Connection)
                    Me._tBL_VILLAGETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tBL_VILLAGETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tBL_VILLAGETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tBL_VILLAGETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tBL_VILLAGETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbl_verificationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbl_verificationTableAdapter, Me._tbl_verificationTableAdapter.Connection)
                    Me._tbl_verificationTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tbl_verificationTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tbl_verificationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbl_verificationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbl_verificationTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._tBL_PROVINCETableAdapter) Is Nothing) Then
                    Me._tBL_PROVINCETableAdapter.Connection = CType(revertConnections(Me._tBL_PROVINCETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tBL_PROVINCETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tBL_DISTRICTTableAdapter) Is Nothing) Then
                    Me._tBL_DISTRICTTableAdapter.Connection = CType(revertConnections(Me._tBL_DISTRICTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tBL_DISTRICTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tBL_COMMUNETableAdapter) Is Nothing) Then
                    Me._tBL_COMMUNETableAdapter.Connection = CType(revertConnections(Me._tBL_COMMUNETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tBL_COMMUNETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tBL_VILLAGETableAdapter) Is Nothing) Then
                    Me._tBL_VILLAGETableAdapter.Connection = CType(revertConnections(Me._tBL_VILLAGETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tBL_VILLAGETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbl_verificationTableAdapter) Is Nothing) Then
                    Me._tbl_verificationTableAdapter.Connection = CType(revertConnections(Me._tbl_verificationTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tbl_verificationTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
